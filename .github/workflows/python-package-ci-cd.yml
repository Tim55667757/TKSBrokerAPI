name: Python Package CI/CD

on:
  push:
    branches:
      - 'release-*'
      - master
      - develop
  pull_request:
    branches:
      - 'release-*'
      - master
  workflow_dispatch:  # Manual runs allowed.

jobs:

  pre_build:
    name: 🔧 Pre-Building Environment
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Upgrade pip and install dependencies
        run: |
          echo 🔄 Upgrading pip and reinstalling packages...
          python -m pip install --upgrade pip --force-reinstall
          pip install -r requirements.txt

      - name: Pre-Build Completed
        run: echo ✅ PRE-BUILDING stage completed successfully!

  testing:
    name: 📝 Running Tests
    needs: pre_build
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/tksbrokerapi:${{ github.workspace }}/tests
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore Python packages cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Test Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          echo 🔍 Starting pytest...
          pytest tests -v --disable-pytest-warnings

      - name: Testing Completed
        run: echo ✅ TESTING stage completed successfully!

  building:
    name: 📦 Building Package
    needs: testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore Python packages cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Build Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Package
        run: |
          echo 📦 Building distribution...
          python setup.py sdist bdist_wheel

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Building Completed
        run: echo ✅ BUILDING stage completed successfully!

  publish:
    name: 🚀 Publishing to PyPI
    needs: building
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore Python packages cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Twine
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Publish Package to PyPI
        run: |
          echo 🚀 Publishing distribution to PyPI...
          python -m twine upload --verbose dist/* --skip-existing
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publishing Completed
        run: echo ✅ PUBLISHING stage completed successfully!

  final_status:
    name: 🎉 Final Status Notification
    runs-on: ubuntu-latest
    needs: [pre_build, testing, building, publish]
    steps:
      - name: Notify Success
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
        run: |
          if [[ "$GITHUB_EVENT_NAME" != "pull_request" ]]; then
            echo "✅ PRE-BUILDING -> TESTING -> BUILDING -> PUBLISHING completed successfully!"
          else
            echo "✅ PRE-BUILDING -> TESTING -> BUILDING completed successfully! (Publishing skipped for PR builds)"
          fi
