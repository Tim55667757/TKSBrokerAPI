window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "tksbrokerapi", "modulename": "tksbrokerapi", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI", "modulename": "tksbrokerapi.TKSBrokerAPI", "kind": "module", "doc": "<p><a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md\" target=\"_blank\"><img src=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/develop/docs/media/TKSBrokerAPI-Logo.png?raw=true\" alt=\"TKSBrokerAPI-Logo\" width=\"780\" /></a></p>\n\n<ul>\n<li><strong>T</strong>echnologies. <strong>K</strong>nowledge. <strong>S</strong>cience.</li>\n</ul>\n\n<p><a href=\"https://yoomoney.ru/fundraise/4WOyAgNgb7M.230111\"><img src=\"https://badgen.net/badge/gift/donate/green\" alt=\"gift\" /></a></p>\n\n<p><strong>TKSBrokerAPI</strong> is the trading platform for automation and simplifying the implementation of trading scenarios,\nas well as working with Tinkoff Invest API server via the REST protocol. The TKSBrokerAPI platform may be used in two ways:\nfrom the console, it has a rich keys and commands, or you can use it as Python module with <code>python import</code>.</p>\n\n<p>TKSBrokerAPI allows you to automate routine trading operations and implement your trading scenarios, or just receive\nthe necessary information from the broker. It is easy enough to integrate into various CI/CD automation systems.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><strong>Open account for trading:</strong> <a href=\"https://tinkoff.ru/sl/AaX1Et1omnH\">https://tinkoff.ru/sl/AaX1Et1omnH</a></li>\n<li><strong>TKSBrokerAPI module documentation:</strong> <a href=\"https://tim55667757.github.io/TKSBrokerAPI/docs/tksbrokerapi/TKSBrokerAPI.html\">https://tim55667757.github.io/TKSBrokerAPI/docs/tksbrokerapi/TKSBrokerAPI.html</a></li>\n<li><strong>CLI examples:</strong> <a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md#Usage-examples\">https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md#Usage-examples</a></li>\n<li><strong>Used constants are in the TKSEnums module:</strong> <a href=\"https://tim55667757.github.io/TKSBrokerAPI/docs/tksbrokerapi/TKSEnums.html\">https://tim55667757.github.io/TKSBrokerAPI/docs/tksbrokerapi/TKSEnums.html</a></li>\n<li><strong>About Tinkoff Invest API:</strong> <a href=\"https://tinkoff.github.io/investAPI/\">https://tinkoff.github.io/investAPI/</a></li>\n<li><strong>Tinkoff Invest API documentation:</strong> <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/\">https://tinkoff.github.io/investAPI/swagger-ui/</a></li>\n<li><strong>How to implement trading scenario in Python:</strong> <a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md#Module-import\">https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md#Module-import</a></li>\n</ul>\n\n<p><a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md#Module-import\">Using the TKSBrokerAPI module</a>,\nyou can implement any trading scenario in Python. Many system used for making trading decisions about buying or selling\n(technical analysis, neural networks, parsing reports or tracking other traders\u2019 transactions), but you still need\nto perform trading operations: place orders, open and close transactions. The <code>TKSBrokerAPI</code> module will act as an\nintermediary between the code with the trading logic and services infrastructure of the Tinkoff Investments broker,\nas well as perform routine tasks on your behalf in <a href=\"https://tinkoff.ru/sl/AaX1Et1omnH\">brokerage account</a>.</p>\n\n<p><a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md\" target=\"_blank\"><img src=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/docs/media/TKSBrokerAPI-flow.png?raw=true\" alt=\"TKSBrokerAPI-flow\" width=\"780\" /></a></p>\n\n<p>The scheme of trade scenario automation with TKSBrokerAPI is very simple:</p>\n\n<ol>\n<li>You come up with a brilliant trading algorithm.</li>\n<li>Write it down step by step in the form of some kind of plan or trading scenario.</li>\n<li>Automate scenario as a Python script using TKSBrokerAPI.</li>\n<li>TKSBrokerAPI takes care of all the work with the Tinkoff Investments broker infrastructure.</li>\n<li>Profit!</li>\n</ol>\n\n<p>But where to get this \"brilliant trading algorithm\"? The TKSBrokerAPI platform will also help you solve the problem\nof obtaining primary, \"raw\" data on trading instruments (shares, bonds, funds, futures and currencies) from the broker\nserver, for their future analysis in any analytical tool convenient for you. To do this, the methods of the TKSBrokerAPI\nmodule provide the ability to extend and save data in classic formats: XLSX and CSV (for analysis in spreadsheet editors),\nMarkdown (for readability), and Pandas DataFrame (for data scientists and stock analysts).</p>\n\n<p>The \"raw\" data can be anything that <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/\">can be obtained</a> from the broker's\nserver. After extends, this data can be used to build, for example, a <a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md#Build-a-bond-payment-calendar\">consolidated payment calendar</a>\nfor bonds and calculate their <a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md#Get-extended-bonds-data\">coupon and current yields</a>,\nor you can generate analytics about the status of the user's portfolio and the <a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md#Get-the-current-portfolio-and-asset-allocation-statistics\">distribution of assets</a>\nby types, companies, industries, currencies, and countries. In addition, you can download <a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md#Download-historical-data-in-OHLCV-candles-format\">historical data</a>\non the prices of any instrument as OHLCV-candlesticks.</p>\n\n<p><a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md\" target=\"_blank\"><img src=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/docs/media/TKSBrokerAPI-extend-data-flow.png?raw=true\" alt=\"TKSBrokerAPI-extend-data-flow\" width=\"780\" /></a></p>\n\n<p>How data is extended and used in TKSBrokerAPI:</p>\n\n<ol>\n<li>You request the data you need from the Tinkoff Investments broker server using the TKSBrokerAPI module:\n<ul>\n<li>in this module, almost all methods return \"raw\" data from the server in the form of a Python dictionary.</li>\n</ul></li>\n<li>Then they are processed and extended:\n<ul>\n<li>with various statistics, parameters and some analytical reports.</li>\n</ul></li>\n<li>After that, the data is stored in a form suitable for further analysis:\n<ul>\n<li>most of the methods return extended data in the form of a Python dictionary or Pandas DataFrame;</li>\n<li>if you launched the TKSBrokerAPI platform in the console, then the data will be saved in XLSX, CSV or Markdown formats.</li>\n</ul></li>\n<li>Next, you can load the data into analytical system and use various data analysis methods to find and highlight\ndependencies, correlations, make predictions and suggest hypothesis.</li>\n<li>Further, based on data analysis, you come up with the same \"brilliant trading algorithm\".</li>\n<li>Automate the trading scenario (according to the previous scheme).</li>\n<li>Profit!</li>\n</ol>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer", "kind": "class", "doc": "<p>This class implements methods to work with Tinkoff broker server.</p>\n\n<p>Examples to work with API: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/\">https://tinkoff.github.io/investAPI/swagger-ui/</a></p>\n\n<p>About <code>token</code>: <a href=\"https://tinkoff.github.io/investAPI/token/\">https://tinkoff.github.io/investAPI/token/</a></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.__init__", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.__init__", "kind": "function", "doc": "<p>Main class init.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>token</strong>:  Bearer token for Tinkoff Invest API. It can be set from environment variable <code>TKS_API_TOKEN</code>.</li>\n<li><strong>accountId</strong>:  string with numeric user account ID in Tinkoff Broker. It can be found in broker's reports.\nAlso, this variable can be set from environment variable <code>TKS_ACCOUNT_ID</code>.</li>\n<li><strong>useCache</strong>:  use default cache file with raw data to use instead of <code>iList</code>.\nTrue by default. Cache is auto-update if new day has come.\nIf you don't want to use cache and always updates raw data then set <code>useCache=False</code>.</li>\n<li><strong>defaultCache</strong>:  path to default cache file. <code>dump.json</code> by default.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">accountId</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">useCache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">defaultCache</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;dump.json&#39;</span></span>)</span>"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.version", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.version", "kind": "variable", "doc": "<p>Current TKSBrokerAPI version: major.minor, but the build number define at the build-server only.</p>\n\n<p>Latest version: <a href=\"https://pypi.org/project/tksbrokerapi/\">https://pypi.org/project/tksbrokerapi/</a></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.aliases", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.aliases", "kind": "variable", "doc": "<p>Some aliases instead official tickers.</p>\n\n<p>See also: <code>TKSEnums.TKS_TICKER_ALIASES</code></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.depth", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.depth", "kind": "variable", "doc": "<p>Depth of Market (DOM) can be &gt;= 1. Default: 1. It used with <code>--price</code> key to showing DOM with current prices for givens ticker or FIGI.</p>\n\n<p>See also: <code>GetCurrentPrices()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.server", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.server", "kind": "variable", "doc": "<p>Tinkoff REST API server for real trade operations. Default: <a href=\"https://invest-public-api.tinkoff.ru/rest\">https://invest-public-api.tinkoff.ru/rest</a></p>\n\n<p>See also: API method <a href=\"https://tinkoff.github.io/investAPI/#tinkoff-invest-api_1\">https://tinkoff.github.io/investAPI/#tinkoff-invest-api_1</a> and <code>SendAPIRequest()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.timeout", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.timeout", "kind": "variable", "doc": "<p>Server operations timeout in seconds. Default: <code>15</code>.</p>\n\n<p>See also: <code>SendAPIRequest()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.headers", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.headers", "kind": "variable", "doc": "<p>Headers which send in every request to broker server. Please, do not change it!\nDefault: <code>{\"Content-Type\": \"application/json\", \"accept\": \"application/json\", \"Authorization\": \"Bearer {your_token}\", \"x-app-name\": \"Tim55667757.TKSBrokerAPI\"}</code>.</p>\n\n<p>See also: <code>SendAPIRequest()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.body", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.body", "kind": "variable", "doc": "<p>Request body which send to broker server. Default: <code>None</code>.</p>\n\n<p>See also: <code>SendAPIRequest()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.moreDebug", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.moreDebug", "kind": "variable", "doc": "<p>Enables more debug information in this class, such as net request and response headers in all methods. <code>False</code> by default.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.useHTMLReports", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.useHTMLReports", "kind": "variable", "doc": "<p>If <code>True</code> then TKSBrokerAPI generate also HTML reports from Markdown. <code>False</code> by default.</p>\n\n<p>See also: Mako Templates for Python (https://www.makotemplates.org/). Mako is a template library provides simple syntax and maximum performance.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.historyFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.historyFile", "kind": "variable", "doc": "<p>Full path to the output file where history candles will be saved or updated. Default: <code>None</code>, it mean that returns only Pandas DataFrame.</p>\n\n<p>See also: <code>History()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.htmlHistoryFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.htmlHistoryFile", "kind": "variable", "doc": "<p>Full path to the html file where rendered candles chart stored. Default: <code>index.html</code>.</p>\n\n<p>See also: <code>ShowHistoryChart()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.instrumentsFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.instrumentsFile", "kind": "variable", "doc": "<p>Filename where full available to user instruments list will be saved. Default: <code>instruments.md</code>.</p>\n\n<p>See also: <code>ShowInstrumentsInfo()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.searchResultsFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.searchResultsFile", "kind": "variable", "doc": "<p>Filename with all found instruments searched by part of its ticker, FIGI or name. Default: <code>search-results.md</code>.</p>\n\n<p>See also: <code>SearchInstruments()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.pricesFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.pricesFile", "kind": "variable", "doc": "<p>Filename where prices of selected instruments will be saved. Default: <code>prices.md</code>.</p>\n\n<p>See also: <code>GetListOfPrices()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.infoFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.infoFile", "kind": "variable", "doc": "<p>Filename where prices of selected instruments will be saved. Default: <code>prices.md</code>.</p>\n\n<p>See also: <code>ShowInstrumentsInfo()</code>, <code>RequestBondCoupons()</code> and <code>RequestTradingStatus()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.bondsXLSXFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.bondsXLSXFile", "kind": "variable", "doc": "<p>Filename where wider Pandas DataFrame with more information about bonds: main info, current prices, \nbonds payment calendar, some statistics will be stored. Default: <code>ext-bonds.xlsx</code>.</p>\n\n<p>See also: <code>ExtendBondsData()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.calendarFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.calendarFile", "kind": "variable", "doc": "<p>Filename where bonds payment calendar will be saved. Default: <code>calendar.md</code>.</p>\n\n<p>Pandas dataframe with only bonds payment calendar also will be stored to default file <code>calendar.xlsx</code>.</p>\n\n<p>See also: <code>CreateBondsCalendar()</code>, <code>ShowBondsCalendar()</code>, <code>ShowInstrumentInfo()</code>, <code>RequestBondCoupons()</code> and <code>ExtendBondsData()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.overviewFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.overviewFile", "kind": "variable", "doc": "<p>Filename where current portfolio, open trades and orders will be saved. Default: <code>overview.md</code>.</p>\n\n<p>See also: <code>Overview()</code>, <code>RequestPortfolio()</code>, <code>RequestPositions()</code>, <code>RequestPendingOrders()</code> and <code>RequestStopOrders()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.overviewDigestFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.overviewDigestFile", "kind": "variable", "doc": "<p>Filename where short digest of the portfolio status will be saved. Default: <code>overview-digest.md</code>.</p>\n\n<p>See also: <code>Overview()</code> with parameter <code>details=\"digest\"</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.overviewPositionsFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.overviewPositionsFile", "kind": "variable", "doc": "<p>Filename where only open positions, without everything else will be saved. Default: <code>overview-positions.md</code>.</p>\n\n<p>See also: <code>Overview()</code> with parameter <code>details=\"positions\"</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.overviewOrdersFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.overviewOrdersFile", "kind": "variable", "doc": "<p>Filename where open limits and stop orders will be saved. Default: <code>overview-orders.md</code>.</p>\n\n<p>See also: <code>Overview()</code> with parameter <code>details=\"orders\"</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.overviewAnalyticsFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.overviewAnalyticsFile", "kind": "variable", "doc": "<p>Filename where only the analytics section and the distribution of the portfolio by various categories will be saved. Default: <code>overview-analytics.md</code>.</p>\n\n<p>See also: <code>Overview()</code> with parameter <code>details=\"analytics\"</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.overviewBondsCalendarFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.overviewBondsCalendarFile", "kind": "variable", "doc": "<p>Filename where only the bonds calendar section will be saved. Default: <code>overview-calendar.md</code>.</p>\n\n<p>See also: <code>Overview()</code> with parameter <code>details=\"calendar\"</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.reportFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.reportFile", "kind": "variable", "doc": "<p>Filename where history of deals and trade statistics will be saved. Default: <code>deals.md</code>.</p>\n\n<p>See also: <code>Deals()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.withdrawalLimitsFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.withdrawalLimitsFile", "kind": "variable", "doc": "<p>Filename where table of funds available for withdrawal will be saved. Default: <code>limits.md</code>.</p>\n\n<p>See also: <code>OverviewLimits()</code> and <code>RequestLimits()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.userInfoFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.userInfoFile", "kind": "variable", "doc": "<p>Filename where all available user's data (<code>accountId</code>s, common user information, margin status and tariff connections limit) will be saved. Default: <code>user-info.md</code>.</p>\n\n<p>See also: <code>OverviewUserInfo()</code>, <code>RequestAccounts()</code>, <code>RequestUserInfo()</code>, <code>RequestMarginStatus()</code> and <code>RequestTariffLimits()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.userAccountsFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.userAccountsFile", "kind": "variable", "doc": "<p>Filename where simple table with all available user accounts (<code>accountId</code>s) will be saved. Default: <code>accounts.md</code>.</p>\n\n<p>See also: <code>OverviewAccounts()</code>, <code>RequestAccounts()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.iListDumpFile", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.iListDumpFile", "kind": "variable", "doc": "<p>Filename where raw data about shares, currencies, bonds, etfs and futures will be stored. Default: <code>dump.json</code>.</p>\n\n<p>Pandas dataframe with raw instruments data also will be stored to default file <code>dump.xlsx</code>.</p>\n\n<p>See also: <code>DumpInstruments()</code> and <code>DumpInstrumentsAsXLSX()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.iList", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.iList", "kind": "variable", "doc": "<p>Dictionary with raw data about shares, currencies, bonds, etfs and futures from broker server. Auto-updating and saving dump to the <code>iListDumpFile</code>.</p>\n\n<p>See also: <code>Listing()</code>, <code>DumpInstruments()</code>.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.priceModel", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.priceModel", "kind": "variable", "doc": "<p>PriceGenerator object to work with candles data: load, render interact and non-interact charts and so on.</p>\n\n<p>See also: <code>LoadHistory()</code>, <code>ShowHistoryChart()</code> and the PriceGenerator project: <a href=\"https://github.com/Tim55667757/PriceGenerator\">https://github.com/Tim55667757/PriceGenerator</a></p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.tag", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.tag", "kind": "variable", "doc": "<p>Setter for Identification TKSBrokerAPI tag in log messages to simplify debugging when platform instances runs in parallel mode. Default: <code>\"\"</code> (empty string).</p>\n", "annotation": ": str"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.ticker", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.ticker", "kind": "variable", "doc": "<p>Setter for string with ticker, e.g. <code>GOOGL</code>. Tickers may be upper case only.</p>\n\n<p>Use alias for <code>USD000UTSTOM</code> simple as <code>USD</code>, <code>EUR_RUB__TOM</code> as <code>EUR</code> etc.\nMore tickers aliases here: <code>TKSEnums.TKS_TICKER_ALIASES</code>.</p>\n\n<p>See also: <code>SearchByTicker()</code>, <code>SearchInstruments()</code>.</p>\n", "annotation": ": str"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.figi", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.figi", "kind": "variable", "doc": "<p>Setter for string with FIGI, e.g. ticker <code>GOOGL</code> has FIGI <code>BBG009S39JX6</code>. FIGIs may be upper case only.</p>\n\n<p>See also: <code>SearchByFIGI()</code>, <code>SearchInstruments()</code>.</p>\n", "annotation": ": str"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.SendAPIRequest", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.SendAPIRequest", "kind": "function", "doc": "<p>Send GET or POST request to broker server and receive JSON object.</p>\n\n<p>self.header: must be defining with dictionary of headers.\nself.body: if define then used as request body. None by default.\nself.timeout: global request timeout, 15 seconds by default.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>url</strong>:  url with REST request.</li>\n<li><strong>reqType</strong>:  send \"GET\" or \"POST\" request. \"GET\" by default.</li>\n<li><strong>retry</strong>:  how many times retry after first request if a 5xx server errors occurred.</li>\n<li><strong>pause</strong>:  sleep time in seconds between retries.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>response JSON (dictionary) from broker.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">reqType</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;GET&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">retry</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">pause</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.Listing", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.Listing", "kind": "function", "doc": "<p>Gets JSON with raw data about shares, currencies, bonds, etfs and futures from broker server.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary with all available broker instruments: currencies, shares, bonds, etfs and futures.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.DumpInstrumentsAsXLSX", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.DumpInstrumentsAsXLSX", "kind": "function", "doc": "<p>Creates XLSX-formatted dump file with raw data of instruments to further used by data scientists or stock analytics.</p>\n\n<p>See also: <code>DumpInstruments()</code>, <code>Listing()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>forceUpdate</strong>:  if <code>True</code> then at first updates data with <code>Listing()</code> method,\notherwise just saves exist <code>iList</code> as XLSX-file (default: <code>dump.xlsx</code>) .</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">forceUpdate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.DumpInstruments", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.DumpInstruments", "kind": "function", "doc": "<p>Receives and returns actual raw data about shares, currencies, bonds, etfs and futures from broker server\nusing <code>Listing()</code> method. If <code>iListDumpFile</code> string is not empty then also save information to this file.</p>\n\n<p>See also: <code>DumpInstrumentsAsXLSX()</code>, <code>Listing()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>forceUpdate</strong>:  if <code>True</code> then at first updates data with <code>Listing()</code> method,\notherwise just saves exist <code>iList</code> as JSON-file (default: <code>dump.json</code>).</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>serialized JSON formatted <code>str</code> with full data of instruments, also saved to the <code>--output</code> JSON-file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">forceUpdate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.ShowInstrumentInfo", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.ShowInstrumentInfo", "kind": "function", "doc": "<p>Show information about one instrument defined by json data and prints it in Markdown format.</p>\n\n<p>See also: <code>SearchByTicker()</code>, <code>SearchByFIGI()</code>, <code>RequestBondCoupons()</code>, <code>ExtendBondsData()</code>, <code>ShowBondsCalendar()</code> and <code>RequestTradingStatus()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iJSON: json data of instrument, example</strong>:  <code>iJSON = self.iList[\"Shares\"][self._ticker]</code></li>\n<li><strong>show</strong>:  if <code>True</code> then also printing information about instrument and its current price.</li>\n<li><strong>onlyFiles</strong>:  if <code>True</code> then do not show Markdown table in the console, but only generates report files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>multilines text in Markdown format with information about one instrument.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iJSON</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">onlyFiles</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.SearchByTicker", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.SearchByTicker", "kind": "function", "doc": "<p>Search and return raw broker's information about instrument by its ticker. Variable <code>ticker</code> must be defined!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>requestPrice</strong>:  if <code>False</code> then do not request current price of instrument (because this is long operation).</li>\n<li><strong>show</strong>:  if <code>False</code> then do not run <code>ShowInstrumentInfo()</code> method and do not print info to the console.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON formatted data with information about instrument.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">requestPrice</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.SearchByFIGI", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.SearchByFIGI", "kind": "function", "doc": "<p>Search and return raw broker's information about instrument by its FIGI. Variable <code>figi</code> must be defined!</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>requestPrice</strong>:  if <code>False</code> then do not request current price of instrument (it's long operation).</li>\n<li><strong>show</strong>:  if <code>False</code> then do not run <code>ShowInstrumentInfo()</code> method and do not print info to the console.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON formatted data with information about instrument.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">requestPrice</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.GetCurrentPrices", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.GetCurrentPrices", "kind": "function", "doc": "<p>Get and show Depth of Market with current prices of the instrument as dictionary. Result example with <code>depth</code> 5:\n<code>{\"buy\": [{\"price\": 1243.8, \"quantity\": 193},\n          {\"price\": 1244.0, \"quantity\": 168},\n          {\"price\": 1244.8, \"quantity\": 5},\n          {\"price\": 1245.0, \"quantity\": 61},\n          {\"price\": 1245.4, \"quantity\": 60}],\n  \"sell\": [{\"price\": 1243.6, \"quantity\": 8},\n           {\"price\": 1242.6, \"quantity\": 10},\n           {\"price\": 1242.4, \"quantity\": 18},\n           {\"price\": 1242.2, \"quantity\": 50},\n           {\"price\": 1242.0, \"quantity\": 113}],\n  \"limitUp\": 1619.0, \"limitDown\": 903.4, \"lastPrice\": 1243.8, \"closePrice\": 1263.0}</code>, where parameters mean:</p>\n\n<ul>\n<li>buy: list of dicts with Sellers prices, see also: <a href=\"https://tinkoff.github.io/investAPI/marketdata/#order\">https://tinkoff.github.io/investAPI/marketdata/#order</a></li>\n<li>sell: list of dicts with Buyers prices,\n<ul>\n<li>price: price of 1 instrument (to get the cost of the lot, you need to multiply it by the lot of size of the instrument),</li>\n<li>quantity: volume value by current price in lots,</li>\n</ul></li>\n<li>limitUp: current trade session limit price, maximum,</li>\n<li>limitDown: current trade session limit price, minimum,</li>\n<li>lastPrice: last deal price of the instrument,</li>\n<li>closePrice: previous trade session close price of the instrument.</li>\n</ul>\n\n<p>See also: <code>SearchByTicker()</code> and <code>SearchByFIGI()</code>.\nREST API for request: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/MarketDataService/MarketDataService_GetOrderBook\">https://tinkoff.github.io/investAPI/swagger-ui/#/MarketDataService/MarketDataService_GetOrderBook</a>\nResponse fields: <a href=\"https://tinkoff.github.io/investAPI/marketdata/#getorderbookresponse\">https://tinkoff.github.io/investAPI/marketdata/#getorderbookresponse</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>show</strong>:  if <code>True</code> then print DOM to log and console.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>orders book dict with lists of current buy and sell prices: <code>{\"buy\": [{\"price\": x1, \"quantity\": y1, ...}], \"sell\": [....]}</code>.\n           If an error occurred then returns an empty record:\n           <code>{\"buy\": [], \"sell\": [], \"limitUp\": None, \"limitDown\": None, \"lastPrice\": None, \"closePrice\": None}</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.ShowInstrumentsInfo", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.ShowInstrumentsInfo", "kind": "function", "doc": "<p>This method get and show information about all available broker instruments for current user account.\nIf <code>instrumentsFile</code> string is not empty then also save information to this file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>show</strong>:  if <code>True</code> then print results to console, if <code>False</code> \u2014 print only to file.</li>\n<li><strong>onlyFiles</strong>:  if <code>True</code> then do not show Markdown table in the console, but only generates report files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>multi-lines string with all available broker instruments.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">onlyFiles</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.SearchInstruments", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.SearchInstruments", "kind": "function", "doc": "<p>This method search and show information about instruments by part of its ticker, FIGI or name.\nIf <code>searchResultsFile</code> string is not empty then also save information to this file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pattern</strong>:  string with part of ticker, FIGI or instrument's name.</li>\n<li><strong>show</strong>:  if <code>True</code> then print results to console, if <code>False</code> \u2014 return list of result only.</li>\n<li><strong>onlyFiles</strong>:  if <code>True</code> then do not show Markdown table in the console, but only generates report files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of dictionaries with all found instruments.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">onlyFiles</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.GetUniqueFIGIs", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.GetUniqueFIGIs", "kind": "function", "doc": "<p>Creating list with unique instrument FIGIs from input list of tickers (priority) or FIGIs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instruments</strong>:  list of strings with tickers or FIGIs.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list with unique instrument FIGIs only.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">instruments</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.GetListOfPrices", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.GetListOfPrices", "kind": "function", "doc": "<p>This method get, maybe show and return prices of list of instruments. WARNING! This is potential long operation!</p>\n\n<p>See limits: <a href=\"https://tinkoff.github.io/investAPI/limits/\">https://tinkoff.github.io/investAPI/limits/</a></p>\n\n<p>If <code>pricesFile</code> string is not empty then also save information to this file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instruments</strong>:  list of strings with tickers or FIGIs.</li>\n<li><strong>show</strong>:  if <code>True</code> then prints prices to console, if <code>False</code> \u2014 prints only to file <code>pricesFile</code>.</li>\n<li><strong>onlyFiles</strong>:  if <code>True</code> then do not show Markdown table in the console, but only generates report files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of instruments looks like <code>[{some ticker info, \"currentPrice\": {current prices}}, {...}, ...]</code>.\n           One item is dict returned by <code>SearchByTicker()</code> or <code>SearchByFIGI()</code> methods.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruments</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">onlyFiles</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.ShowListOfPrices", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.ShowListOfPrices", "kind": "function", "doc": "<p>Show table contains current prices of given instruments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li>**iList: list of instruments looks like <code>[{some ticker info, \"currentPrice\"**:  {current prices}}, {...}, ...]</code>.\nOne item is dict returned by <code>SearchByTicker(requestPrice=True)</code> or by <code>SearchByFIGI(requestPrice=True)</code> methods.</li>\n<li><strong>show</strong>:  if <code>True</code> then prints prices to console, if <code>False</code> \u2014 prints only to file <code>pricesFile</code>.</li>\n<li><strong>onlyFiles</strong>:  if <code>True</code> then do not show Markdown table in the console, but only generates report files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>multilines text in Markdown format as a table contains current prices.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iList</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">onlyFiles</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestTradingStatus", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestTradingStatus", "kind": "function", "doc": "<p>Requesting trading status for the instrument defined by <code>figi</code> variable.</p>\n\n<p>REST API: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/MarketDataService/MarketDataService_GetTradingStatus\">https://tinkoff.github.io/investAPI/swagger-ui/#/MarketDataService/MarketDataService_GetTradingStatus</a></p>\n\n<p>Documentation: <a href=\"https://tinkoff.github.io/investAPI/marketdata/#gettradingstatusrequest\">https://tinkoff.github.io/investAPI/marketdata/#gettradingstatusrequest</a></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary with trading status attributes. Response example:\n           <code>{\"figi\": \"TCS00A103X66\", \"tradingStatus\": \"SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING\",\n          \"limitOrderAvailableFlag\": false, \"marketOrderAvailableFlag\": false, \"apiTradeAvailableFlag\": true}</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestPortfolio", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestPortfolio", "kind": "function", "doc": "<p>Requesting actual user's portfolio for current <code>accountId</code>.</p>\n\n<p>REST API for user portfolio: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/OperationsService/OperationsService_GetPortfolio\">https://tinkoff.github.io/investAPI/swagger-ui/#/OperationsService/OperationsService_GetPortfolio</a></p>\n\n<p>Documentation: <a href=\"https://tinkoff.github.io/investAPI/operations/#portfoliorequest\">https://tinkoff.github.io/investAPI/operations/#portfoliorequest</a></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary with user's portfolio.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestPositions", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestPositions", "kind": "function", "doc": "<p>Requesting open positions by currencies and instruments for current <code>accountId</code>.</p>\n\n<p>REST API for open positions: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/OperationsService/OperationsService_GetPositions\">https://tinkoff.github.io/investAPI/swagger-ui/#/OperationsService/OperationsService_GetPositions</a></p>\n\n<p>Documentation: <a href=\"https://tinkoff.github.io/investAPI/operations/#positionsrequest\">https://tinkoff.github.io/investAPI/operations/#positionsrequest</a></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary with open positions by instruments.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestPendingOrders", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestPendingOrders", "kind": "function", "doc": "<p>Requesting current actual pending limit orders for current <code>accountId</code>.</p>\n\n<p>REST API for pending (market) orders: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/OrdersService/OrdersService_GetOrders\">https://tinkoff.github.io/investAPI/swagger-ui/#/OrdersService/OrdersService_GetOrders</a></p>\n\n<p>Documentation: <a href=\"https://tinkoff.github.io/investAPI/orders/#getordersrequest\">https://tinkoff.github.io/investAPI/orders/#getordersrequest</a></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of dictionaries with pending limit orders.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestStopOrders", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestStopOrders", "kind": "function", "doc": "<p>Requesting current actual stop orders for current <code>accountId</code>.</p>\n\n<p>REST API for opened stop-orders: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/StopOrdersService/StopOrdersService_GetStopOrders\">https://tinkoff.github.io/investAPI/swagger-ui/#/StopOrdersService/StopOrdersService_GetStopOrders</a></p>\n\n<p>Documentation: <a href=\"https://tinkoff.github.io/investAPI/stoporders/#getstopordersrequest\">https://tinkoff.github.io/investAPI/stoporders/#getstopordersrequest</a></p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of dictionaries with stop orders.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.Overview", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.Overview", "kind": "function", "doc": "<p>Get portfolio: all open positions, orders and some statistics for current <code>accountId</code>.\nIf <code>overviewFile</code>, <code>overviewDigestFile</code>, <code>overviewPositionsFile</code>, <code>overviewOrdersFile</code>, <code>overviewAnalyticsFile</code>\nand <code>overviewBondsCalendarFile</code> are defined then also save information to file.</p>\n\n<p>WARNING! It is not recommended to run this method too many times in a loop! The server receives\nmany requests about the state of the portfolio, and then, based on the received data, a large number\nof calculation and statistics are collected.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>show</strong>:  if <code>False</code> then only dictionary returns, if <code>True</code> then show more debug information.</li>\n<li><strong>details</strong>:  how detailed should the information be?\n<ul>\n<li><code>full</code> \u2014 shows full available information about portfolio status (by default),</li>\n<li><code>positions</code> \u2014 shows only open positions,</li>\n<li><code>orders</code> \u2014 shows only sections of open limits and stop orders.</li>\n<li><code>digest</code> \u2014 show a short digest of the portfolio status,</li>\n<li><code>analytics</code> \u2014 shows only the analytics section and the distribution of the portfolio by various categories,</li>\n<li><code>calendar</code> \u2014 shows only the bonds calendar section (if these present in portfolio).</li>\n</ul></li>\n<li><strong>onlyFiles</strong>:  if <code>True</code> then do not show Markdown table in the console, but only generates report files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary with client's raw portfolio and some statistics.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">details</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;full&#39;</span>, </span><span class=\"param\"><span class=\"n\">onlyFiles</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.Deals", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.Deals", "kind": "function", "doc": "<p>Returns history operations between two given dates for current <code>accountId</code>.\nIf <code>reportFile</code> string is not empty then also save human-readable report.\nShows some statistical data of closed positions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>start</strong>:  see docstring in <code>TradeRoutines.GetDatesAsString()</code> method.</li>\n<li><strong>end</strong>:  see docstring in <code>TradeRoutines.GetDatesAsString()</code> method.</li>\n<li><strong>show</strong>:  if <code>True</code> then also prints all records to the console.</li>\n<li><strong>showCancelled</strong>:  if <code>False</code> then remove information about cancelled operations from the deals report.</li>\n<li><strong>onlyFiles</strong>:  if <code>True</code> then do not show Markdown table in the console, but only generates report files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>original list of dictionaries with history of deals records from API (\"operations\" key):\n           <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/OperationsService/OperationsService_GetOperations\">https://tinkoff.github.io/investAPI/swagger-ui/#/OperationsService/OperationsService_GetOperations</a>\n           and dictionary with custom stats: operations in different currencies, withdrawals, incomes etc.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">showCancelled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">onlyFiles</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.History", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.History", "kind": "function", "doc": "<p>This method returns last history candles of the current instrument defined by <code>ticker</code> or <code>figi</code> (FIGI id).</p>\n\n<p>History returned between two given dates: <code>start</code> and <code>end</code>. Minimum requested date in the past is <code>1970-01-01</code>.\nWarning! Broker server used ISO UTC time by default.</p>\n\n<p>If <code>historyFile</code> is not <code>None</code> then method save history to file, otherwise return only Pandas DataFrame.\nAlso, <code>historyFile</code> used to update history with <code>onlyMissing</code> parameter.</p>\n\n<p>See also: <code>LoadHistory()</code> and <code>ShowHistoryChart()</code> methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>start</strong>:  see docstring in <code>TradeRoutines.GetDatesAsString()</code> method.</li>\n<li><strong>end</strong>:  see docstring in <code>TradeRoutines.GetDatesAsString()</code> method.</li>\n<li><strong>interval</strong>:  this is a candle interval. Current available values are <code>\"1min\"</code>, <code>\"5min\"</code>, <code>\"15min\"</code>,\n<code>\"hour\"</code>, <code>\"day\"</code>. Default: <code>\"hour\"</code>.</li>\n<li><strong>onlyMissing</strong>:  if <code>True</code> then add only last missing candles, do not request all history length from <code>start</code>.\nFalse by default. Warning! History appends only from last candle to current time\nwith always update last candle!</li>\n<li><strong>csvSep</strong>:  separator if csv-file is used, <code>,</code> by default.</li>\n<li><strong>show</strong>:  if <code>True</code> then also prints Pandas DataFrame to the console.</li>\n<li><strong>onlyFiles</strong>:  if <code>True</code> then do not show Markdown table in the console, but only generates report files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Pandas DataFrame with prices history. Headers of columns are defined by default:\n           <code>[\"date\", \"time\", \"open\", \"high\", \"low\", \"close\", \"volume\"]</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;hour&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">onlyMissing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">csvSep</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;,&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">onlyFiles</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.LoadHistory", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.LoadHistory", "kind": "function", "doc": "<p>Load candles history from csv-file and return Pandas DataFrame object.</p>\n\n<p>See also: <code>History()</code> and <code>ShowHistoryChart()</code> methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filePath</strong>:  path to csv-file to open.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filePath</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.ShowHistoryChart", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.ShowHistoryChart", "kind": "function", "doc": "<p>Render an HTML-file with interact or non-interact candlesticks chart. Candles may be path to the csv-file.</p>\n\n<p>Self variable <code>htmlHistoryFile</code> can be use as html-file name to save interaction or non-interaction chart.\nDefault: <code>index.html</code> (both for interact and non-interact candlesticks chart).</p>\n\n<p>See also: <code>History()</code> and <code>LoadHistory()</code> methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>candles</strong>:  string to csv-file with candles in OHLCV-model or like Pandas Dataframe object.</li>\n<li><strong>interact</strong>:  if True (default) then chain of candlesticks will render as interactive Bokeh chart.\nSee examples: <a href=\"https://github.com/Tim55667757/PriceGenerator#overriding-parameters\">https://github.com/Tim55667757/PriceGenerator#overriding-parameters</a>\nIf False then chain of candlesticks will render as not interactive Google Candlestick chart.\nSee examples: <a href=\"https://github.com/Tim55667757/PriceGenerator#statistics-and-chart-on-a-simple-template\">https://github.com/Tim55667757/PriceGenerator#statistics-and-chart-on-a-simple-template</a></li>\n<li><strong>openInBrowser</strong>:  if True then immediately open chart in default browser, otherwise only path to\nhtml-file prints to console. False by default, to avoid issues with <code>permissions denied</code> to html-file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">candles</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">interact</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">openInBrowser</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.Trade", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.Trade", "kind": "function", "doc": "<p>Universal method to create market order and make deal at the current price for current <code>accountId</code>. Returns JSON data with response.\nIf <code>tp</code> or <code>sl</code> &gt; 0, then in additional will open stop-orders with \"TP\" and \"SL\" flags for <code>stopType</code> parameter.</p>\n\n<p>See also: <code>Order()</code> docstring. More simple methods than <code>Trade()</code> are <code>Buy()</code> and <code>Sell()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>operation</strong>:  string \"Buy\" or \"Sell\".</li>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>tp</strong>:  float &gt; 0, target price for stop-order with \"TP\" type. It used as take profit parameter <code>targetPrice</code> in <code>self.Order()</code>.</li>\n<li><strong>sl</strong>:  float &gt; 0, target price for stop-order with \"SL\" type. It used as stop loss parameter <code>targetPrice</code> in <code>self.Order()</code>.</li>\n<li><strong>expDate</strong>:  string \"Undefined\" by default or local date in the future,\nit is a string with format <code>%Y-%m-%d %H:%M:%S</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lots</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">tp</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">sl</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">expDate</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Undefined&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.Buy", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.Buy", "kind": "function", "doc": "<p>More simple method than <code>Trade()</code>. Create <code>Buy</code> market order and make deal at the current price. Returns JSON data with response.\nIf <code>tp</code> or <code>sl</code> &gt; 0, then in additional will open stop-orders with \"TP\" and \"SL\" flags for <code>stopType</code> parameter.</p>\n\n<p>See also: <code>Order()</code> and <code>Trade()</code> docstrings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>tp</strong>:  float &gt; 0, take profit price of stop-order.</li>\n<li><strong>sl</strong>:  float &gt; 0, stop loss price of stop-order.</li>\n<li><strong>expDate</strong>:  it's a local date in the future.\nString has a format like this: <code>%Y-%m-%d %H:%M:%S</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lots</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">tp</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">sl</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">expDate</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Undefined&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.Sell", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.Sell", "kind": "function", "doc": "<p>More simple method than <code>Trade()</code>. Create <code>Sell</code> market order and make deal at the current price. Returns JSON data with response.\nIf <code>tp</code> or <code>sl</code> &gt; 0, then in additional will open stop-orders with \"TP\" and \"SL\" flags for <code>stopType</code> parameter.</p>\n\n<p>See also: <code>Order()</code> and <code>Trade()</code> docstrings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>tp</strong>:  float &gt; 0, take profit price of stop-order.</li>\n<li><strong>sl</strong>:  float &gt; 0, stop loss price of stop-order.</li>\n<li><strong>expDate</strong>:  it's a local date in the future.\nString has a format like this: <code>%Y-%m-%d %H:%M:%S</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lots</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">tp</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">sl</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">expDate</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Undefined&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.CloseTrades", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.CloseTrades", "kind": "function", "doc": "<p>Close position of given instruments.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instruments</strong>:  list of instruments defined by tickers or FIGIs that must be closed.</li>\n<li><strong>portfolio</strong>:  pre-received dictionary with open trades, returned by <code>Overview()</code> method.\nThis avoids unnecessary downloading data from the server.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">instruments</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">portfolio</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.CloseAllTrades", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.CloseAllTrades", "kind": "function", "doc": "<p>Close all positions of given instruments with defined type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iType</strong>:  type of the instruments that be closed, it must be one of supported types in TKS_INSTRUMENTS list.</li>\n<li><strong>portfolio</strong>:  pre-received dictionary with open trades, returned by <code>Overview()</code> method.\nThis avoids unnecessary downloading data from the server.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iType</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">portfolio</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.Order", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.Order", "kind": "function", "doc": "<p>Universal method to create market or limit orders with all available parameters for current <code>accountId</code>.\nSee more simple methods: <code>BuyLimit()</code>, <code>BuyStop()</code>, <code>SellLimit()</code>, <code>SellStop()</code>.</p>\n\n<p>If orderType is \"Limit\" then create pending limit-order below current price if operation is \"Buy\" and above\ncurrent price if operation is \"Sell\". A limit order has no expiration date, it lasts until the end of the trading day.</p>\n\n<p>Warning! If you try to create limit-order above current price if \"Buy\" or below current price if \"Sell\"\nthen broker immediately open market order as you can do simple --buy or --sell operations!</p>\n\n<p>If orderType is \"Stop\" then creates stop-order with any direction \"Buy\" or \"Sell\".\nWhen current price will go up or down to target price value then broker opens a limit order.\nStop-order is opened with unlimited expiration date by default, or you can define expiration date with expDate parameter.</p>\n\n<p>Only one attempt and no retry for opens order. If network issue occurred you can create new request.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>operation</strong>:  string \"Buy\" or \"Sell\".</li>\n<li><strong>orderType</strong>:  string \"Limit\" or \"Stop\".</li>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>targetPrice</strong>:  target price &gt; 0. This is open trade price for limit order.</li>\n<li><strong>limitPrice</strong>:  limit price &gt;= 0. This parameter only makes sense for stop-order. If limitPrice = 0, then it set as targetPrice.\nBroker will create limit-order with price equal to limitPrice, when current price goes to target price of stop-order.</li>\n<li><strong>stopType</strong>:  string \"Limit\" by default. This parameter only makes sense for stop-order. There are 3 stop-order types\n\"SL\", \"TP\", \"Limit\" for \"Stop loss\", \"Take profit\" and \"Stop limit\" types accordingly.\nStop loss order always executed by market price.</li>\n<li><strong>expDate</strong>:  string \"Undefined\" by default or local date in the future.\nString has a format like this: <code>%Y-%m-%d %H:%M:%S</code>.\nThis date is converting to UTC format for server. This parameter only makes sense for stop-order.\nA limit order has no expiration date, it lasts until the end of the trading day.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">orderType</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lots</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">targetPrice</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">limitPrice</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">stopType</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Limit&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">expDate</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Undefined&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.BuyLimit", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.BuyLimit", "kind": "function", "doc": "<p>Create pending <code>Buy</code> limit-order (below current price). You must specify only 2 parameters:\n<code>lots</code> and <code>target price</code> to open buy limit-order. If you try to create buy limit-order above current price then\nbroker immediately open <code>Buy</code> market order, such as if you do simple <code>--buy</code> operation!\nSee also: <code>Order()</code> docstring.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>targetPrice</strong>:  target price &gt; 0. This is open trade price for limit order.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lots</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">targetPrice</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.BuyStop", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.BuyStop", "kind": "function", "doc": "<p>Create <code>Buy</code> stop-order. You must specify at least 2 parameters: <code>lots</code> <code>target price</code> to open buy stop-order.\nIn additional you can specify 3 parameters for buy stop-order: <code>limit price</code> &gt;=0, <code>stop type</code> = Limit|SL|TP,\n<code>expiration date</code> = Undefined|<code>%%Y-%%m-%%d %%H:%%M:%%S</code>. When current price will go up or down to\ntarget price value then broker opens a limit order. See also: <code>Order()</code> docstring.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>targetPrice</strong>:  target price &gt; 0. This is trigger price for buy stop-order.</li>\n<li><strong>limitPrice</strong>:  limit price &gt;= 0 (limitPrice = targetPrice if limitPrice is 0). Broker will create limit-order\nwith price equal to limitPrice, when current price goes to target price of buy stop-order.</li>\n<li><strong>stopType</strong>:  string \"Limit\" by default. There are 3 stop-order types \"SL\", \"TP\", \"Limit\"\nfor \"Stop loss\", \"Take profit\" and \"Stop limit\" types accordingly.</li>\n<li><strong>expDate</strong>:  string \"Undefined\" by default or local date in the future.\nString has a format like this: <code>%Y-%m-%d %H:%M:%S</code>.\nThis date is converting to UTC format for server.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lots</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">targetPrice</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">limitPrice</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">stopType</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Limit&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">expDate</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Undefined&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.SellLimit", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.SellLimit", "kind": "function", "doc": "<p>Create pending <code>Sell</code> limit-order (above current price). You must specify only 2 parameters:\n<code>lots</code> and <code>target price</code> to open sell limit-order. If you try to create sell limit-order below current price then\nbroker immediately open <code>Sell</code> market order, such as if you do simple <code>--sell</code> operation!\nSee also: <code>Order()</code> docstring.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>targetPrice</strong>:  target price &gt; 0. This is open trade price for limit order.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">lots</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">targetPrice</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.SellStop", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.SellStop", "kind": "function", "doc": "<p>Create <code>Sell</code> stop-order. You must specify at least 2 parameters: <code>lots</code> <code>target price</code> to open sell stop-order.\nIn addition, you can specify 3 parameters in sell stop-order: <code>limit price</code> &gt;=0, <code>stop type</code> = Limit|SL|TP,\n<code>expiration date</code> = Undefined|<code>%%Y-%%m-%%d %%H:%%M:%%S</code>. When current price will go up or down to\ntarget price value then broker opens a limit order. See also: <code>Order()</code> docstring.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lots</strong>:  volume, integer count of lots &gt;= 1.</li>\n<li><strong>targetPrice</strong>:  target price &gt; 0. This is trigger price in sell stop-order.</li>\n<li><strong>limitPrice</strong>:  limit price &gt;= 0 (limitPrice = targetPrice if limitPrice is 0). Broker will create limit-order\nwith price equal to limitPrice, when current price goes to target price of sell stop-order.</li>\n<li><strong>stopType</strong>:  string \"Limit\" by default. There are 3 stop-order types \"SL\", \"TP\", \"Limit\"\nfor \"Stop loss\", \"Take profit\" and \"Stop limit\" types accordingly.</li>\n<li><strong>expDate</strong>:  string \"Undefined\" by default or local date in the future.\nString has a format like this: <code>%Y-%m-%d %H:%M:%S</code>.\nThis date is converting to UTC format for server.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>JSON with response from broker server.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lots</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">targetPrice</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">limitPrice</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">stopType</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Limit&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">expDate</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Undefined&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.CloseOrders", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.CloseOrders", "kind": "function", "doc": "<p>Cancel order or list of orders by its <code>orderId</code> or <code>stopOrderId</code> for current <code>accountId</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>orderIDs</strong>:  list of integers with <code>orderId</code> or <code>stopOrderId</code>.</li>\n<li><strong>allOrdersIDs</strong>:  pre-received lists of all active pending limit orders.\nThis avoids unnecessary downloading data from the server.</li>\n<li><strong>allStopOrdersIDs</strong>:  pre-received lists of all active stop orders.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">orderIDs</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">allOrdersIDs</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allStopOrdersIDs</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.CloseAllOrders", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.CloseAllOrders", "kind": "function", "doc": "<p>Gets a list of open pending and stop orders and cancel it all.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.CloseAll", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.CloseAll", "kind": "function", "doc": "<p>Close all available (not blocked) opened trades and orders.</p>\n\n<p>Also, you can select one or more keywords case-insensitive:\n<code>orders</code>, <code>shares</code>, <code>bonds</code>, <code>etfs</code> and <code>futures</code> from <code>TKS_INSTRUMENTS</code> enum to specify trades type.</p>\n\n<p>Currency positions you must close manually using buy or sell operations, <code>CloseTrades()</code> or <code>CloseAllTrades()</code> methods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.CloseAllByTicker", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.CloseAllByTicker", "kind": "function", "doc": "<p>Close all available (not blocked) opened trades and orders for one instrument defined by its ticker.</p>\n\n<p>This method searches opened trade and orders of instrument throw all portfolio and then use\n<code>CloseTrades()</code> and <code>CloseOrders()</code> methods to close trade and cancel all orders for that instrument.</p>\n\n<p>See also: <code>IsInLimitOrders()</code>, <code>GetLimitOrderIDs()</code>, <code>IsInStopOrders()</code>, <code>GetStopOrderIDs()</code>, <code>CloseTrades()</code> and <code>CloseOrders()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instrument</strong>:  string with ticker.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">instrument</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.CloseAllByFIGI", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.CloseAllByFIGI", "kind": "function", "doc": "<p>Close all available (not blocked) opened trades and orders for one instrument defined by its FIGI id.</p>\n\n<p>This method searches opened trade and orders of instrument throw all portfolio and then use\n<code>CloseTrades()</code> and <code>CloseOrders()</code> methods to close trade and cancel all orders for that instrument.</p>\n\n<p>See also: <code>IsInLimitOrders()</code>, <code>GetLimitOrderIDs()</code>, <code>IsInStopOrders()</code>, <code>GetStopOrderIDs()</code>, <code>CloseTrades()</code> and <code>CloseOrders()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instrument</strong>:  string with FIGI id.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">instrument</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.ParseOrderParameters", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.ParseOrderParameters", "kind": "function", "doc": "<p>Parse input dictionary of strings with order parameters and return dictionary with parameters to open all orders.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>operation</strong>:  string \"Buy\" or \"Sell\".</li>\n<li><strong>inputParameters</strong>:  this is dict of strings that looks like this\n<code>{\"lots\": \"L_int,...\", \"prices\": \"P_float,...\"}</code> where\n\"lots\" key: one or more lot values (integer numbers) to open with every limit-order\n\"prices\" key: one or more prices to open limit-orders\nCounts of values in lots and prices lists must be equals!</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of dictionaries with all lots and prices to open orders that looks like this <code>[{\"lot\": lots_1, \"price\": price_1}, {...}, ...]</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">operation</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">inputParameters</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.IsInPortfolio", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.IsInPortfolio", "kind": "function", "doc": "<p>Checks if instrument is in the user's portfolio. Instrument must be defined by <code>ticker</code> (highly priority) or <code>figi</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>portfolio</strong>:  dict with user's portfolio data. If <code>None</code>, then requests portfolio from <code>Overview()</code> method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>True</code> if portfolio contains open position with given instrument, <code>False</code> otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.GetInstrumentFromPortfolio", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.GetInstrumentFromPortfolio", "kind": "function", "doc": "<p>Returns instrument from the user's portfolio if it presents there.\nInstrument must be defined by <code>ticker</code> (highly priority) or <code>figi</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>portfolio</strong>:  dict with user's portfolio data. If <code>None</code>, then requests portfolio from <code>Overview()</code> method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict with instrument if portfolio contains open position with this instrument, <code>None</code> otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.IsInLimitOrders", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.IsInLimitOrders", "kind": "function", "doc": "<p>Checks if instrument is in the limit orders list. Instrument must be defined by <code>ticker</code> (highly priority) or <code>figi</code>.</p>\n\n<p>See also: <code>CloseAllByTicker()</code> and <code>CloseAllByFIGI()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>portfolio</strong>:  dict with user's portfolio data. If <code>None</code>, then requests portfolio from <code>Overview()</code> method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>True</code> if limit orders list contains some limit orders for the instrument, <code>False</code> otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.GetLimitOrderIDs", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.GetLimitOrderIDs", "kind": "function", "doc": "<p>Returns list with all <code>orderID</code>s of opened pending limit orders for the instrument.\nInstrument must be defined by <code>ticker</code> (highly priority) or <code>figi</code>.</p>\n\n<p>See also: <code>CloseAllByTicker()</code> and <code>CloseAllByFIGI()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>portfolio</strong>:  dict with user's portfolio data. If <code>None</code>, then requests portfolio from <code>Overview()</code> method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list with <code>orderID</code>s of limit orders.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.IsInStopOrders", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.IsInStopOrders", "kind": "function", "doc": "<p>Checks if instrument is in the stop orders list. Instrument must be defined by <code>ticker</code> (highly priority) or <code>figi</code>.</p>\n\n<p>See also: <code>CloseAllByTicker()</code> and <code>CloseAllByFIGI()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>portfolio</strong>:  dict with user's portfolio data. If <code>None</code>, then requests portfolio from <code>Overview()</code> method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p><code>True</code> if stop orders list contains some stop orders for the instrument, <code>False</code> otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.GetStopOrderIDs", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.GetStopOrderIDs", "kind": "function", "doc": "<p>Returns list with all <code>orderID</code>s of opened stop orders for the instrument.\nInstrument must be defined by <code>ticker</code> (highly priority) or <code>figi</code>.</p>\n\n<p>See also: <code>CloseAllByTicker()</code> and <code>CloseAllByFIGI()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>portfolio</strong>:  dict with user's portfolio data. If <code>None</code>, then requests portfolio from <code>Overview()</code> method.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list with <code>orderID</code>s of stop orders.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">portfolio</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestLimits", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestLimits", "kind": "function", "doc": "<p>Method for obtaining the available funds for withdrawal for current <code>accountId</code>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li>REST API for limits: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/OperationsService/OperationsService_GetWithdrawLimits\">https://tinkoff.github.io/investAPI/swagger-ui/#/OperationsService/OperationsService_GetWithdrawLimits</a></li>\n<li><code>OverviewLimits()</code> method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict with raw data from server that contains free funds for withdrawal. Example of dict:\n           <code>{\"money\": [{\"currency\": \"rub\", \"units\": \"100\", \"nano\": 290000000}, {...}], \"blocked\": [...], \"blockedGuarantee\": [...]}</code>.\n           Here <code>money</code> is an array of portfolio currency positions, <code>blocked</code> is an array of blocked currency\n           positions of the portfolio and <code>blockedGuarantee</code> is locked money under collateral for futures.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.OverviewLimits", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.OverviewLimits", "kind": "function", "doc": "<p>Method for parsing and show table with available funds for withdrawal for current <code>accountId</code>.</p>\n\n<p>See also: <code>RequestLimits()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>show</strong>:  if <code>False</code> then only dictionary returns, if <code>True</code> then also print withdrawal limits to log.</li>\n<li><strong>onlyFiles</strong>:  if <code>True</code> then do not show Markdown table in the console, but only generates report files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict with raw parsed data from server and some calculated statistics about it.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">onlyFiles</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestAccounts", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestAccounts", "kind": "function", "doc": "<p>Method for requesting all brokerage accounts (<code>accountId</code>s) of current user detected by <code>token</code>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li>REST API: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/UsersService/UsersService_GetAccounts\">https://tinkoff.github.io/investAPI/swagger-ui/#/UsersService/UsersService_GetAccounts</a></li>\n<li>What does account fields mean: <a href=\"https://tinkoff.github.io/investAPI/users/#account\">https://tinkoff.github.io/investAPI/users/#account</a></li>\n<li><code>OverviewUserInfo()</code> method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict with raw data from server that contains accounts info. Example of dict:\n           <code>{\"accounts\": [{\"id\": \"20000xxxxx\", \"type\": \"ACCOUNT_TYPE_TINKOFF\", \"name\": \"TKSBrokerAPI account\",\n           \"status\": \"ACCOUNT_STATUS_OPEN\", \"openedDate\": \"2018-05-23T00:00:00Z\",\n           \"closedDate\": \"1970-01-01T00:00:00Z\", \"accessLevel\": \"ACCOUNT_ACCESS_LEVEL_FULL_ACCESS\"}, ...]}</code>.\n           If <code>closedDate=\"1970-01-01T00:00:00Z\"</code> it means that account is active now.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestUserInfo", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestUserInfo", "kind": "function", "doc": "<p>Method for requesting common user's information.</p>\n\n<p>See also:</p>\n\n<ul>\n<li>REST API: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/UsersService/UsersService_GetInfo\">https://tinkoff.github.io/investAPI/swagger-ui/#/UsersService/UsersService_GetInfo</a></li>\n<li>What does user info fields mean: <a href=\"https://tinkoff.github.io/investAPI/users/#getinforequest\">https://tinkoff.github.io/investAPI/users/#getinforequest</a></li>\n<li>What does <code>qualified_for_work_with</code> field mean: <a href=\"https://tinkoff.github.io/investAPI/faq_users/#qualified_for_work_with\">https://tinkoff.github.io/investAPI/faq_users/#qualified_for_work_with</a></li>\n<li><code>OverviewUserInfo()</code> method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict with raw data from server that contains user's information. Example of dict:\n           <code>{\"premStatus\": true, \"qualStatus\": false, \"qualifiedForWorkWith\": [\"bond\", \"foreign_shares\", \"leverage\",\n           \"russian_shares\", \"structured_income_bonds\"], \"tariff\": \"premium\"}</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestMarginStatus", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestMarginStatus", "kind": "function", "doc": "<p>Method for requesting margin calculation for defined account ID.</p>\n\n<p>See also:</p>\n\n<ul>\n<li>REST API: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/UsersService/UsersService_GetMarginAttributes\">https://tinkoff.github.io/investAPI/swagger-ui/#/UsersService/UsersService_GetMarginAttributes</a></li>\n<li>What does margin fields mean: <a href=\"https://tinkoff.github.io/investAPI/users/#getmarginattributesresponse\">https://tinkoff.github.io/investAPI/users/#getmarginattributesresponse</a></li>\n<li><code>OverviewUserInfo()</code> method</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>accountId</strong>:  string with numeric account ID. If <code>None</code>, then used class field <code>accountId</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict with raw data from server that contains margin calculation. If margin is disabled then returns empty dict.\n           Example of responses:\n           status code 400: <code>{\"code\": 3, \"message\": \"account margin status is disabled\", \"description\": \"30051\" }</code>, returns: <code>{}</code>.\n           status code 200: <code>{\"liquidPortfolio\": {\"currency\": \"rub\", \"units\": \"7175\", \"nano\": 560000000},\n                            \"startingMargin\": {\"currency\": \"rub\", \"units\": \"6311\", \"nano\": 840000000},\n                            \"minimalMargin\": {\"currency\": \"rub\", \"units\": \"3155\", \"nano\": 920000000},\n                            \"fundsSufficiencyLevel\": {\"units\": \"1\", \"nano\": 280000000},\n                            \"amountOfMissingFunds\": {\"currency\": \"rub\", \"units\": \"-863\", \"nano\": -720000000}}</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">accountId</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestTariffLimits", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestTariffLimits", "kind": "function", "doc": "<p>Method for requesting limits of current tariff (connections, API methods etc.) of current user detected by <code>token</code>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li>REST API: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/UsersService/UsersService_GetUserTariff\">https://tinkoff.github.io/investAPI/swagger-ui/#/UsersService/UsersService_GetUserTariff</a></li>\n<li>What does fields in tariff mean: <a href=\"https://tinkoff.github.io/investAPI/users/#getusertariffrequest\">https://tinkoff.github.io/investAPI/users/#getusertariffrequest</a></li>\n<li>Unary limit: <a href=\"https://tinkoff.github.io/investAPI/users/#unarylimit\">https://tinkoff.github.io/investAPI/users/#unarylimit</a></li>\n<li>Stream limit: <a href=\"https://tinkoff.github.io/investAPI/users/#streamlimit\">https://tinkoff.github.io/investAPI/users/#streamlimit</a></li>\n<li><code>OverviewUserInfo()</code> method</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict with raw data from server that contains limits of current tariff. Example of dict:\n           <code>{\"unaryLimits\": [{\"limitPerMinute\": 0, \"methods\": [\"methods\", \"methods\"]}, ...],\n           \"streamLimits\": [{\"streams\": [\"streams\", \"streams\"], \"limit\": 6}, ...]}</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.RequestBondCoupons", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.RequestBondCoupons", "kind": "function", "doc": "<p>Requesting bond payment calendar from official placement date to maturity date. If these dates are unknown\nthen requesting dates <code>\"from\": \"1970-01-01T00:00:00.000Z\"</code> and <code>\"to\": \"2099-12-31T23:59:59.000Z\"</code>.\nAll dates are in UTC timezone.</p>\n\n<p>REST API: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/InstrumentsService/InstrumentsService_GetBondCoupons\">https://tinkoff.github.io/investAPI/swagger-ui/#/InstrumentsService/InstrumentsService_GetBondCoupons</a>\nDocumentation:</p>\n\n<ul>\n<li>request: <a href=\"https://tinkoff.github.io/investAPI/instruments/#getbondcouponsrequest\">https://tinkoff.github.io/investAPI/instruments/#getbondcouponsrequest</a></li>\n<li>response: <a href=\"https://tinkoff.github.io/investAPI/instruments/#coupon\">https://tinkoff.github.io/investAPI/instruments/#coupon</a></li>\n</ul>\n\n<p>See also: <code>ExtendBondsData()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>iJSON</strong>:  raw json data of a bond from broker server, example <code>iJSON = self.iList[\"Bonds\"][self._ticker]</code>\nIf raw iJSON is not data of bond then server returns an error [400] with message:\n<code>{\"code\": 3, \"message\": \"instrument type is not bond\", \"description\": \"30048\"}</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary with bond payment calendar. Response example\n           <code>{\"events\": [{\"figi\": \"TCS00A101YV8\", \"couponDate\": \"2023-07-26T00:00:00Z\", \"couponNumber\": \"12\",\n           \"fixDate\": \"2023-07-25T00:00:00Z\", \"payOneBond\": {\"currency\": \"rub\", \"units\": \"7\", \"nano\": 170000000},\n           \"couponType\": \"COUPON_TYPE_CONSTANT\", \"couponStartDate\": \"2023-04-26T00:00:00Z\",\n           \"couponEndDate\": \"2023-07-26T00:00:00Z\", \"couponPeriod\": 91}, {...}, ...]}</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">iJSON</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.ExtendBondsData", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.ExtendBondsData", "kind": "function", "doc": "<p>Requests jsons with raw bonds data for every ticker or FIGI in instruments list and transform it to the wider\nPandas DataFrame with more information about bonds: main info, current prices, bond payment calendar,\ncoupon yields, current yields and some statistics etc.</p>\n\n<p>WARNING! This is too long operation if a lot of bonds requested from broker server.</p>\n\n<p>See also: <code>ShowInstrumentInfo()</code>, <code>CreateBondsCalendar()</code>, <code>ShowBondsCalendar()</code>, <code>RequestBondCoupons()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instruments</strong>:  list of strings with tickers or FIGIs.</li>\n<li><strong>xlsx</strong>:  if True then also exports Pandas DataFrame to xlsx-file <code>bondsXLSXFile</code>, default <code>ext-bonds.xlsx</code>,\nfor further used by data scientists or stock analytics.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>wider Pandas DataFrame with more full and calculated data about bonds, than raw response from broker.\n           In XLSX-file and Pandas DataFrame fields mean:\n           - main info about bond: <a href=\"https://tinkoff.github.io/investAPI/instruments/#bond\">https://tinkoff.github.io/investAPI/instruments/#bond</a>\n           - info about coupon: <a href=\"https://tinkoff.github.io/investAPI/instruments/#coupon\">https://tinkoff.github.io/investAPI/instruments/#coupon</a></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">instruments</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">xlsx</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.CreateBondsCalendar", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.CreateBondsCalendar", "kind": "function", "doc": "<p>Creates bond payments calendar as Pandas DataFrame, and also save it to the XLSX-file, <code>calendar.xlsx</code> by default.</p>\n\n<p>WARNING! This is too long operation if a lot of bonds requested from broker server.</p>\n\n<p>See also: <code>ShowBondsCalendar()</code>, <code>ExtendBondsData()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>extBonds</strong>:  Pandas DataFrame object returns by <code>ExtendBondsData()</code> method and contains\nextended information about bonds: main info, current prices, bond payment calendar,\ncoupon yields, current yields and some statistics etc.\nIf this parameter is <code>None</code> then used <code>figi</code> or <code>ticker</code> as bond name and then calculate <code>ExtendBondsData()</code>.</li>\n<li><strong>xlsx</strong>:  if True then also exports Pandas DataFrame to file <code>calendarFile</code> + <code>\".xlsx\"</code>, <code>calendar.xlsx</code> by default,\nfor further used by data scientists or stock analytics.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Pandas DataFrame with only bond payments calendar data. Fields mean: <a href=\"https://tinkoff.github.io/investAPI/instruments/#coupon\">https://tinkoff.github.io/investAPI/instruments/#coupon</a></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">extBonds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">xlsx</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.ShowBondsCalendar", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.ShowBondsCalendar", "kind": "function", "doc": "<p>Show bond payments calendar as a table. One row in input <code>bonds</code> dataframe contains one bond.\nAlso, creates Markdown file with calendar data, <code>calendar.md</code> by default.</p>\n\n<p>See also: <code>ShowInstrumentInfo()</code>, <code>RequestBondCoupons()</code>, <code>CreateBondsCalendar()</code> and <code>ExtendBondsData()</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>extBonds</strong>:  Pandas DataFrame object returns by <code>ExtendBondsData()</code> method and contains\nextended information about bonds: main info, current prices, bond payment calendar,\ncoupon yields, current yields and some statistics etc.\nIf this parameter is <code>None</code> then used <code>figi</code> or <code>ticker</code> as bond name and then calculate <code>ExtendBondsData()</code>.</li>\n<li><strong>show</strong>:  if <code>True</code> then also printing bonds payment calendar to the console,\notherwise save to file <code>calendarFile</code> only. <code>False</code> by default.</li>\n<li><strong>onlyFiles</strong>:  if <code>True</code> then do not show Markdown table in the console, but only generates report files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>multilines text in Markdown format with bonds payment calendar as a table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">extBonds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">onlyFiles</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.OverviewAccounts", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.OverviewAccounts", "kind": "function", "doc": "<p>Method for parsing and show simple table with all available user accounts.</p>\n\n<p>See also: <code>RequestAccounts()</code> and <code>OverviewUserInfo()</code> methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>show</strong>:  if <code>False</code> then only dictionary with accounts data returns, if <code>True</code> then also print it to log.</li>\n<li><strong>onlyFiles</strong>:  if <code>True</code> then do not show Markdown table in the console, but only generates report files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict with parsed accounts data received from <code>RequestAccounts()</code> method. Example of dict:\n           <code>view = {\"rawAccounts\": {rawAccounts from RequestAccounts() method...},\n                  \"stat\": {\"accountId string\": {\"type\": \"Tinkoff brokerage account\", \"name\": \"Test - 1\",\n                                                \"status\": \"Opened and active account\", \"opened\": \"2018-05-23 00:00:00\",\n                                                \"closed\": \"\u2014\", \"access\": \"Full access\" }, ...}}</code></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">onlyFiles</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.TinkoffBrokerServer.OverviewUserInfo", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "TinkoffBrokerServer.OverviewUserInfo", "kind": "function", "doc": "<p>Method for parsing and show all available user's data (<code>accountId</code>s, common user information, margin status and tariff connections limit).</p>\n\n<p>See also: <code>OverviewAccounts()</code>, <code>RequestAccounts()</code>, <code>RequestUserInfo()</code>, <code>RequestMarginStatus()</code> and <code>RequestTariffLimits()</code> methods.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>show</strong>:  if <code>False</code> then only dictionary returns, if <code>True</code> then also print user's data to log.</li>\n<li><strong>onlyFiles</strong>:  if <code>True</code> then do not show Markdown table in the console, but only generates report files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict with raw parsed data from server and some calculated statistics about it.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">show</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">onlyFiles</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.Args", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "Args", "kind": "class", "doc": "<p>If <code>Main()</code> function is imported as module, then this class used to convert arguments from **kwargs as object.</p>\n"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.Args.__init__", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "Args.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.ParseArgs", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "ParseArgs", "kind": "function", "doc": "<p>This function get and parse command line keys.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSBrokerAPI.Main", "modulename": "tksbrokerapi.TKSBrokerAPI", "qualname": "Main", "kind": "function", "doc": "<p>Main function for work with TKSBrokerAPI in the console.</p>\n\n<p>See examples:</p>\n\n<ul>\n<li>in english: <a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md\">https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md</a></li>\n<li>in russian: <a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README.md\">https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README.md</a></li>\n</ul>\n\n<p><a href=\"https://yoomoney.ru/fundraise/4WOyAgNgb7M.230111\"><img src=\"https://badgen.net/badge/gift/donate/green\" alt=\"gift\" /></a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TKSEnums", "modulename": "tksbrokerapi.TKSEnums", "kind": "module", "doc": "<p><a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md\" target=\"_blank\"><img src=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/develop/docs/media/TKSBrokerAPI-Logo.png?raw=true\" alt=\"TKSBrokerAPI-Logo\" width=\"780\" /></a></p>\n\n<ul>\n<li><strong>T</strong>echnologies. <strong>K</strong>nowledge. <strong>S</strong>cience.</li>\n</ul>\n\n<p><a href=\"https://yoomoney.ru/fundraise/4WOyAgNgb7M.230111\"><img src=\"https://badgen.net/badge/gift/donate/green\" alt=\"gift\" /></a></p>\n\n<p>Module <strong>TKSEnums</strong> contains a lot of constants from enums sections of Tinkoff Open API documentation used by TKSBrokerAPI module.</p>\n\n<ul>\n<li><strong>TKSBrokerAPI module documentation:</strong> <a href=\"https://tim55667757.github.io/TKSBrokerAPI/docs/tksbrokerapi/TKSBrokerAPI.html\">https://tim55667757.github.io/TKSBrokerAPI/docs/tksbrokerapi/TKSBrokerAPI.html</a></li>\n<li><strong>TKSBrokerAPI CLI examples:</strong> <a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md\">https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md</a></li>\n<li><strong>About Tinkoff Invest API:</strong> <a href=\"https://tinkoff.github.io/investAPI/\">https://tinkoff.github.io/investAPI/</a></li>\n<li><strong>Tinkoff Invest API documentation:</strong> <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/\">https://tinkoff.github.io/investAPI/swagger-ui/</a></li>\n<li><strong>Open account for trading:</strong> <a href=\"https://tinkoff.ru/sl/AaX1Et1omnH\">https://tinkoff.ru/sl/AaX1Et1omnH</a></li>\n</ul>\n"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_DATE_TIME_FORMAT", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_DATE_TIME_FORMAT", "kind": "variable", "doc": "<p>Date and time string format used by Tinkoff Open API. Default: <code>\"%Y-%m-%dT%H:%M:%SZ\"</code>.</p>\n", "default_value": " = &#x27;%Y-%m-%dT%H:%M:%SZ&#x27;"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_DATE_TIME_FORMAT_EXT", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_DATE_TIME_FORMAT_EXT", "kind": "variable", "doc": "<p>Extended date and time string format used by Tinkoff Open API. Default: <code>\"%Y-%m-%dT%H:%M:%S.%fZ\"</code>.</p>\n", "default_value": " = &#x27;%Y-%m-%dT%H:%M:%S.%fZ&#x27;"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_DATE_FORMAT", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_DATE_FORMAT", "kind": "variable", "doc": "<p>Date string format for some methods. Default: <code>\"%Y-%m-%d\"</code>.</p>\n", "default_value": " = &#x27;%Y-%m-%d&#x27;"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_PRINT_DATE_TIME_FORMAT", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_PRINT_DATE_TIME_FORMAT", "kind": "variable", "doc": "<p>Human-readable format of date and time string. Default: <code>\"%Y-%m-%d %H:%M:%S\"</code>.</p>\n", "default_value": " = &#x27;%Y-%m-%d %H:%M:%S&#x27;"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_INSTRUMENTS", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_INSTRUMENTS", "kind": "variable", "doc": "<p>Type of instrument for trade methods must be only one of supported types, listed in this constant. Default: <code>[\"Currencies\", \"Shares\", \"Bonds\", \"Etfs\", \"Futures\"]</code></p>\n", "default_value": " = [&#x27;Currencies&#x27;, &#x27;Shares&#x27;, &#x27;Bonds&#x27;, &#x27;Etfs&#x27;, &#x27;Futures&#x27;]"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_TICKER_ALIASES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_TICKER_ALIASES", "kind": "variable", "doc": "<p>Some aliases instead official tickers for using in CLI. For example, you can use <code>\"USD\"</code> instead of <code>\"USD000UTSTOM\"</code>.</p>\n", "default_value": " = {&#x27;USD&#x27;: &#x27;USD000UTSTOM&#x27;, &#x27;EUR&#x27;: &#x27;EUR_RUB__TOM&#x27;, &#x27;GBP&#x27;: &#x27;GBPRUB_TOM&#x27;, &#x27;CHF&#x27;: &#x27;CHFRUB_TOM&#x27;, &#x27;CNY&#x27;: &#x27;CNYRUB_TOM&#x27;, &#x27;HKD&#x27;: &#x27;HKDRUB_TOM&#x27;, &#x27;TRY&#x27;: &#x27;TRYRUB_TOM&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_CANDLE_INTERVALS", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_CANDLE_INTERVALS", "kind": "variable", "doc": "<p>Candles interval for requesting history data with Tinkoff API. Current available keys are <code>\"1min\"</code>, <code>\"5min\"</code>, <code>\"15min\"</code>, <code>\"hour\"</code>, <code>\"day\"</code>.\nSee more: <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/#/MarketDataService/MarketDataService_GetCandles\">https://tinkoff.github.io/investAPI/swagger-ui/#/MarketDataService/MarketDataService_GetCandles</a></p>\n", "default_value": " = {&#x27;Undefined&#x27;: [&#x27;CANDLE_INTERVAL_UNSPECIFIED&#x27;, 0, 0], &#x27;1min&#x27;: [&#x27;CANDLE_INTERVAL_1_MIN&#x27;, 1, 1438], &#x27;5min&#x27;: [&#x27;CANDLE_INTERVAL_5_MIN&#x27;, 5, 287], &#x27;15min&#x27;: [&#x27;CANDLE_INTERVAL_15_MIN&#x27;, 15, 95], &#x27;hour&#x27;: [&#x27;CANDLE_INTERVAL_HOUR&#x27;, 60, 167], &#x27;day&#x27;: [&#x27;CANDLE_INTERVAL_DAY&#x27;, 1440, 364]}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_ACCOUNT_STATUSES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_ACCOUNT_STATUSES", "kind": "variable", "doc": "<p>Account status, enums: <a href=\"https://tinkoff.github.io/investAPI/users/#accountstatus\">https://tinkoff.github.io/investAPI/users/#accountstatus</a></p>\n", "default_value": " = {&#x27;ACCOUNT_STATUS_UNSPECIFIED&#x27;: &#x27;Account status undefined&#x27;, &#x27;ACCOUNT_STATUS_NEW&#x27;: &#x27;New, open in progress...&#x27;, &#x27;ACCOUNT_STATUS_OPEN&#x27;: &#x27;Opened and active account&#x27;, &#x27;ACCOUNT_STATUS_CLOSED&#x27;: &#x27;Closed account&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_ACCOUNT_TYPES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_ACCOUNT_TYPES", "kind": "variable", "doc": "<p>Account type, enums: <a href=\"https://tinkoff.github.io/investAPI/users/#accounttype\">https://tinkoff.github.io/investAPI/users/#accounttype</a></p>\n", "default_value": " = {&#x27;ACCOUNT_TYPE_UNSPECIFIED&#x27;: &#x27;Account type undefined&#x27;, &#x27;ACCOUNT_TYPE_TINKOFF&#x27;: &#x27;Tinkoff brokerage account&#x27;, &#x27;ACCOUNT_TYPE_TINKOFF_IIS&#x27;: &#x27;IIS account&#x27;, &#x27;ACCOUNT_TYPE_INVEST_BOX&#x27;: &#x27;Investment &quot;piggy bank&quot;&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_ACCESS_LEVELS", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_ACCESS_LEVELS", "kind": "variable", "doc": "<p>Access level, enums: <a href=\"https://tinkoff.github.io/investAPI/users/#accesslevel\">https://tinkoff.github.io/investAPI/users/#accesslevel</a></p>\n", "default_value": " = {&#x27;ACCOUNT_ACCESS_LEVEL_UNSPECIFIED&#x27;: &#x27;Access level undefined&#x27;, &#x27;ACCOUNT_ACCESS_LEVEL_FULL_ACCESS&#x27;: &#x27;Full access&#x27;, &#x27;ACCOUNT_ACCESS_LEVEL_READ_ONLY&#x27;: &#x27;Read-only access&#x27;, &#x27;ACCOUNT_ACCESS_LEVEL_NO_ACCESS&#x27;: &#x27;No access&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_QUALIFIED_TYPES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_QUALIFIED_TYPES", "kind": "variable", "doc": "<p>Values of <code>qualified_for_work_with</code>, field: <a href=\"https://tinkoff.github.io/investAPI/faq_users/#qualified_for_work_with\">https://tinkoff.github.io/investAPI/faq_users/#qualified_for_work_with</a></p>\n", "default_value": " = {&#x27;derivative&#x27;: &#x27;Futures and Options&#x27;, &#x27;structured_bonds&#x27;: &#x27;Structured bonds&#x27;, &#x27;closed_fund&#x27;: &#x27;Closed-ended funds&#x27;, &#x27;bond&#x27;: &#x27;Bonds with low rating&#x27;, &#x27;structured_income_bonds&#x27;: &#x27;Structured income bonds&#x27;, &#x27;foreign_shares&#x27;: &#x27;Foreign shares not included in the exchange quotation lists&#x27;, &#x27;foreign_etf&#x27;: &#x27;Foreign ETF&#x27;, &#x27;foreign_bond&#x27;: &#x27;Euro-bonds&#x27;, &#x27;russian_shares&#x27;: &#x27;Russian shares not included in quotation lists&#x27;, &#x27;leverage&#x27;: &#x27;Margin trading, unsecured leveraged trades&#x27;, &#x27;repo&#x27;: &#x27;REPO agreements&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_TRADING_STATUSES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_TRADING_STATUSES", "kind": "variable", "doc": "<p>Security Trading Status, enums: <a href=\"https://tinkoff.github.io/investAPI/orders/#securitytradingstatus\">https://tinkoff.github.io/investAPI/orders/#securitytradingstatus</a></p>\n", "default_value": " = {&#x27;SECURITY_TRADING_STATUS_UNSPECIFIED&#x27;: &#x27;Trading status undefined&#x27;, &#x27;SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING&#x27;: &#x27;Not available for trading&#x27;, &#x27;SECURITY_TRADING_STATUS_OPENING_PERIOD&#x27;: &#x27;Trade opening period&#x27;, &#x27;SECURITY_TRADING_STATUS_CLOSING_PERIOD&#x27;: &#x27;Trade closing period&#x27;, &#x27;SECURITY_TRADING_STATUS_BREAK_IN_TRADING&#x27;: &#x27;Break in trading&#x27;, &#x27;SECURITY_TRADING_STATUS_NORMAL_TRADING&#x27;: &#x27;Normal trading&#x27;, &#x27;SECURITY_TRADING_STATUS_CLOSING_AUCTION&#x27;: &#x27;Closing auction&#x27;, &#x27;SECURITY_TRADING_STATUS_DARK_POOL_AUCTION&#x27;: &#x27;Large package auction&#x27;, &#x27;SECURITY_TRADING_STATUS_DISCRETE_AUCTION&#x27;: &#x27;Discrete auction&#x27;, &#x27;SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD&#x27;: &#x27;Opening auction&#x27;, &#x27;SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE&#x27;: &#x27;Trading period at the closing auction price&#x27;, &#x27;SECURITY_TRADING_STATUS_SESSION_ASSIGNED&#x27;: &#x27;Session assigned&#x27;, &#x27;SECURITY_TRADING_STATUS_SESSION_CLOSE&#x27;: &#x27;Session closed&#x27;, &#x27;SECURITY_TRADING_STATUS_SESSION_OPEN&#x27;: &#x27;Session is open&#x27;, &#x27;SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING&#x27;: &quot;Broker&#x27;s internal liquidity mode trading&quot;, &#x27;SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING&#x27;: &quot;Break in trading in the broker&#x27;s internal liquidity mode&quot;, &#x27;SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING&#x27;: &quot;Broker&#x27;s internal liquidity mode is not available&quot;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_OPERATION_TYPES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_OPERATION_TYPES", "kind": "variable", "doc": "<p>Operation type, enums: <a href=\"https://tinkoff.github.io/investAPI/operations/#operationtype\">https://tinkoff.github.io/investAPI/operations/#operationtype</a></p>\n", "default_value": " = {&#x27;OPERATION_TYPE_UNSPECIFIED&#x27;: &#x27;The operation type is not defined&#x27;, &#x27;OPERATION_TYPE_INPUT&#x27;: &#x27;Deposit on broker account&#x27;, &#x27;OPERATION_TYPE_BOND_TAX&#x27;: &#x27;Withholding personal income tax on bond coupons&#x27;, &#x27;OPERATION_TYPE_OUTPUT_SECURITIES&#x27;: &#x27;Securities output&#x27;, &#x27;OPERATION_TYPE_OVERNIGHT&#x27;: &#x27;Overnight REPO income&#x27;, &#x27;OPERATION_TYPE_TAX&#x27;: &#x27;Tax withholding&#x27;, &#x27;OPERATION_TYPE_BOND_REPAYMENT_FULL&#x27;: &#x27;Full bond redemption&#x27;, &#x27;OPERATION_TYPE_SELL_CARD&#x27;: &#x27;Sell securities from the card&#x27;, &#x27;OPERATION_TYPE_DIVIDEND_TAX&#x27;: &#x27;Withholding tax on dividends&#x27;, &#x27;OPERATION_TYPE_OUTPUT&#x27;: &#x27;Withdrawals&#x27;, &#x27;OPERATION_TYPE_BOND_REPAYMENT&#x27;: &#x27;Bonds partial redemption&#x27;, &#x27;OPERATION_TYPE_TAX_CORRECTION&#x27;: &#x27;Tax correction&#x27;, &#x27;OPERATION_TYPE_SERVICE_FEE&#x27;: &#x27;Brokerage account maintenance fee deduction&#x27;, &#x27;OPERATION_TYPE_BENEFIT_TAX&#x27;: &#x27;Withholding tax for material benefits&#x27;, &#x27;OPERATION_TYPE_MARGIN_FEE&#x27;: &#x27;Withholding commission for an uncovered position&#x27;, &#x27;OPERATION_TYPE_BUY&#x27;: &#x27;Buy securities&#x27;, &#x27;OPERATION_TYPE_BUY_CARD&#x27;: &#x27;Buy securities from a card&#x27;, &#x27;OPERATION_TYPE_INPUT_SECURITIES&#x27;: &#x27;Transfer securities from another depository&#x27;, &#x27;OPERATION_TYPE_SELL_MARGIN&#x27;: &#x27;Sell (by margin call)&#x27;, &#x27;OPERATION_TYPE_BROKER_FEE&#x27;: &#x27;Operation fee deduction&#x27;, &#x27;OPERATION_TYPE_BUY_MARGIN&#x27;: &#x27;Buy (by margin call)&#x27;, &#x27;OPERATION_TYPE_DIVIDEND&#x27;: &#x27;Dividends income&#x27;, &#x27;OPERATION_TYPE_SELL&#x27;: &#x27;Sell securities&#x27;, &#x27;OPERATION_TYPE_COUPON&#x27;: &#x27;Coupons income&#x27;, &#x27;OPERATION_TYPE_SUCCESS_FEE&#x27;: &#x27;Success fee deduction&#x27;, &#x27;OPERATION_TYPE_DIVIDEND_TRANSFER&#x27;: &#x27;Transfer of dividend income&#x27;, &#x27;OPERATION_TYPE_ACCRUING_VARMARGIN&#x27;: &#x27;Variation margin crediting&#x27;, &#x27;OPERATION_TYPE_WRITING_OFF_VARMARGIN&#x27;: &#x27;Withholding variation margin&#x27;, &#x27;OPERATION_TYPE_DELIVERY_BUY&#x27;: &#x27;Buy (futures contract expired)&#x27;, &#x27;OPERATION_TYPE_DELIVERY_SELL&#x27;: &#x27;Sell (futures contract expired)&#x27;, &#x27;OPERATION_TYPE_TRACK_MFEE&#x27;: &#x27;Autotrack account management fee&#x27;, &#x27;OPERATION_TYPE_TRACK_PFEE&#x27;: &#x27;Pay per result on auto follow score&#x27;, &#x27;OPERATION_TYPE_TAX_PROGRESSIVE&#x27;: &#x27;Tax withholding at the rate of 15%&#x27;, &#x27;OPERATION_TYPE_BOND_TAX_PROGRESSIVE&#x27;: &#x27;Withholding tax on coupons at the rate of 15%&#x27;, &#x27;OPERATION_TYPE_DIVIDEND_TAX_PROGRESSIVE&#x27;: &#x27;Withholding tax on dividends at the rate of 15%&#x27;, &#x27;OPERATION_TYPE_BENEFIT_TAX_PROGRESSIVE&#x27;: &#x27;Withholding tax for material benefits at the rate of 15%&#x27;, &#x27;OPERATION_TYPE_TAX_CORRECTION_PROGRESSIVE&#x27;: &#x27;Tax correction at the rate of 15%&#x27;, &#x27;OPERATION_TYPE_TAX_REPO_PROGRESSIVE&#x27;: &#x27;Withholding tax on refunds on REPO transactions at the rate of 15%&#x27;, &#x27;OPERATION_TYPE_TAX_REPO&#x27;: &#x27;Tax withholding on REPO trade refunds&#x27;, &#x27;OPERATION_TYPE_TAX_REPO_HOLD&#x27;: &#x27;Tax hold on REPO transactions&#x27;, &#x27;OPERATION_TYPE_TAX_REPO_REFUND&#x27;: &#x27;Tax refund on REPO transactions&#x27;, &#x27;OPERATION_TYPE_TAX_REPO_HOLD_PROGRESSIVE&#x27;: &#x27;Withholding tax on REPO transactions at the rate of 15%&#x27;, &#x27;OPERATION_TYPE_TAX_REPO_REFUND_PROGRESSIVE&#x27;: &#x27;Tax refund on REPO transactions at the rate of 15%&#x27;, &#x27;OPERATION_TYPE_DIV_EXT&#x27;: &#x27;Payout dividends to the card&#x27;, &#x27;OPERATION_TYPE_TAX_CORRECTION_COUPON&#x27;: &#x27;Coupon tax correction&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_OPERATION_STATES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_OPERATION_STATES", "kind": "variable", "doc": "<p>Operation state, enums: <a href=\"https://tinkoff.github.io/investAPI/operations/#operationstate\">https://tinkoff.github.io/investAPI/operations/#operationstate</a></p>\n", "default_value": " = {&#x27;OPERATION_STATE_UNSPECIFIED&#x27;: &#x27;! Unknown&#x27;, &#x27;OPERATION_STATE_EXECUTED&#x27;: &#x27;\u221a Executed&#x27;, &#x27;OPERATION_STATE_CANCELED&#x27;: &#x27;\u00d7 Canceled&#x27;, &#x27;OPERATION_STATE_PROGRESS&#x27;: &#x27;\u21bb Progress&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_ORDER_DIRECTIONS", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_ORDER_DIRECTIONS", "kind": "variable", "doc": "<p>Order direction, enums: <a href=\"https://tinkoff.github.io/investAPI/orders/#orderdirection\">https://tinkoff.github.io/investAPI/orders/#orderdirection</a></p>\n", "default_value": " = {&#x27;ORDER_DIRECTION_UNSPECIFIED&#x27;: &#x27;Undefined&#x27;, &#x27;ORDER_DIRECTION_BUY&#x27;: &#x27;\u2191 Buy&#x27;, &#x27;ORDER_DIRECTION_SELL&#x27;: &#x27;\u2193 Sell&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_STOP_ORDER_DIRECTIONS", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_STOP_ORDER_DIRECTIONS", "kind": "variable", "doc": "<p>Stop-order direction, enums: <a href=\"https://tinkoff.github.io/investAPI/stoporders/#stoporderdirection\">https://tinkoff.github.io/investAPI/stoporders/#stoporderdirection</a></p>\n", "default_value": " = {&#x27;STOP_ORDER_DIRECTION_UNSPECIFIED&#x27;: &#x27;Undefined&#x27;, &#x27;STOP_ORDER_DIRECTION_BUY&#x27;: &#x27;\u2191 Buy&#x27;, &#x27;STOP_ORDER_DIRECTION_SELL&#x27;: &#x27;\u2193 Sell&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_ORDER_TYPES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_ORDER_TYPES", "kind": "variable", "doc": "<p>Order type, enums: <a href=\"https://tinkoff.github.io/investAPI/orders/#ordertype\">https://tinkoff.github.io/investAPI/orders/#ordertype</a></p>\n", "default_value": " = {&#x27;ORDER_TYPE_UNSPECIFIED&#x27;: &#x27;Undefined&#x27;, &#x27;ORDER_TYPE_LIMIT&#x27;: &#x27;Limit&#x27;, &#x27;ORDER_TYPE_MARKET&#x27;: &#x27;Market&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_STOP_ORDER_TYPES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_STOP_ORDER_TYPES", "kind": "variable", "doc": "<p>Stop-order type, enums: <a href=\"https://tinkoff.github.io/investAPI/stoporders/#stopordertype\">https://tinkoff.github.io/investAPI/stoporders/#stopordertype</a></p>\n", "default_value": " = {&#x27;STOP_ORDER_TYPE_UNSPECIFIED&#x27;: &#x27;Undefined&#x27;, &#x27;STOP_ORDER_TYPE_TAKE_PROFIT&#x27;: &#x27;Take profit&#x27;, &#x27;STOP_ORDER_TYPE_STOP_LOSS&#x27;: &#x27;Stop loss&#x27;, &#x27;STOP_ORDER_TYPE_STOP_LIMIT&#x27;: &#x27;Stop limit&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_ORDER_STATES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_ORDER_STATES", "kind": "variable", "doc": "<p>Order status, enums: <a href=\"https://tinkoff.github.io/investAPI/orders/#orderexecutionreportstatus\">https://tinkoff.github.io/investAPI/orders/#orderexecutionreportstatus</a></p>\n", "default_value": " = {&#x27;EXECUTION_REPORT_STATUS_UNSPECIFIED&#x27;: &#x27;! Unknown&#x27;, &#x27;EXECUTION_REPORT_STATUS_FILL&#x27;: &#x27;Performed&#x27;, &#x27;EXECUTION_REPORT_STATUS_REJECTED&#x27;: &#x27;Rejected&#x27;, &#x27;EXECUTION_REPORT_STATUS_CANCELLED&#x27;: &#x27;Cancelled&#x27;, &#x27;EXECUTION_REPORT_STATUS_NEW&#x27;: &#x27;New order&#x27;, &#x27;EXECUTION_REPORT_STATUS_PARTIALLYFILL&#x27;: &#x27;Partially filled&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_STOP_ORDER_EXPIRATION_TYPES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_STOP_ORDER_EXPIRATION_TYPES", "kind": "variable", "doc": "<p>Expiration type of stop-orders, enums: <a href=\"https://tinkoff.github.io/investAPI/stoporders/#stoporderexpirationtype\">https://tinkoff.github.io/investAPI/stoporders/#stoporderexpirationtype</a></p>\n", "default_value": " = {&#x27;STOP_ORDER_EXPIRATION_TYPE_UNSPECIFIED&#x27;: &#x27;Undefined&#x27;, &#x27;STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_CANCEL&#x27;: &#x27;Until cancel&#x27;, &#x27;STOP_ORDER_EXPIRATION_TYPE_GOOD_TILL_DATE&#x27;: &#x27;Until date&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_COUPON_TYPES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_COUPON_TYPES", "kind": "variable", "doc": "<p>Coupon type of bonds, enums: <a href=\"https://tinkoff.github.io/investAPI/instruments/#coupontype\">https://tinkoff.github.io/investAPI/instruments/#coupontype</a></p>\n", "default_value": " = {&#x27;COUPON_TYPE_UNSPECIFIED&#x27;: &#x27;Undefined&#x27;, &#x27;COUPON_TYPE_CONSTANT&#x27;: &#x27;Constant&#x27;, &#x27;COUPON_TYPE_FLOATING&#x27;: &#x27;Floating&#x27;, &#x27;COUPON_TYPE_DISCOUNT&#x27;: &#x27;Discount&#x27;, &#x27;COUPON_TYPE_MORTGAGE&#x27;: &#x27;Mortgage&#x27;, &#x27;COUPON_TYPE_FIX&#x27;: &#x27;Fixed&#x27;, &#x27;COUPON_TYPE_VARIABLE&#x27;: &#x27;Variable&#x27;, &#x27;COUPON_TYPE_OTHER&#x27;: &#x27;Other&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_REAL_EXCHANGES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_REAL_EXCHANGES", "kind": "variable", "doc": "<p>The real exchange for the execution of trades, enums: <a href=\"https://tinkoff.github.io/investAPI/instruments/#realexchange\">https://tinkoff.github.io/investAPI/instruments/#realexchange</a></p>\n", "default_value": " = {&#x27;REAL_EXCHANGE_UNSPECIFIED&#x27;: &#x27;Undefined&#x27;, &#x27;REAL_EXCHANGE_MOEX&#x27;: &#x27;MOEX&#x27;, &#x27;REAL_EXCHANGE_RTS&#x27;: &#x27;SPBEX&#x27;, &#x27;REAL_EXCHANGE_OTC&#x27;: &#x27;OTC&#x27;}"}, {"fullname": "tksbrokerapi.TKSEnums.TKS_SHARE_TYPES", "modulename": "tksbrokerapi.TKSEnums", "qualname": "TKS_SHARE_TYPES", "kind": "variable", "doc": "<p>Share type, enums: <a href=\"https://tinkoff.github.io/investAPI/instruments/#sharetype\">https://tinkoff.github.io/investAPI/instruments/#sharetype</a></p>\n", "default_value": " = {&#x27;SHARE_TYPE_UNSPECIFIED&#x27;: &#x27;Undefined&#x27;, &#x27;SHARE_TYPE_COMMON&#x27;: &#x27;Ordinary&#x27;, &#x27;SHARE_TYPE_PREFERRED&#x27;: &#x27;Privileged&#x27;, &#x27;SHARE_TYPE_ADR&#x27;: &#x27;American Depositary Receipts (ADR)&#x27;, &#x27;SHARE_TYPE_GDR&#x27;: &#x27;Global Depositary Receipts (GDR)&#x27;, &#x27;SHARE_TYPE_MLP&#x27;: &#x27;Master Limited Partnership (MLP)&#x27;, &#x27;SHARE_TYPE_NY_REG_SHRS&#x27;: &#x27;New York registered shares&#x27;, &#x27;SHARE_TYPE_CLOSED_END_FUND&#x27;: &#x27;Closed investment fund&#x27;, &#x27;SHARE_TYPE_REIT&#x27;: &#x27;Real estate trust&#x27;}"}, {"fullname": "tksbrokerapi.Templates", "modulename": "tksbrokerapi.Templates", "kind": "module", "doc": "<p><a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md\" target=\"_blank\"><img src=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/develop/docs/media/TKSBrokerAPI-Logo.png?raw=true\" alt=\"TKSBrokerAPI-Logo\" width=\"780\" /></a></p>\n\n<ul>\n<li><strong>T</strong>echnologies. <strong>K</strong>nowledge. <strong>S</strong>cience.</li>\n</ul>\n\n<p><a href=\"https://yoomoney.ru/fundraise/4WOyAgNgb7M.230111\"><img src=\"https://badgen.net/badge/gift/donate/green\" alt=\"gift\" /></a></p>\n\n<p>Module contains some html-templates used by reporting methods in TKSBrokerAPI module.</p>\n\n<ul>\n<li><strong>TKSBrokerAPI module documentation:</strong> <a href=\"https://tim55667757.github.io/TKSBrokerAPI/docs/tksbrokerapi/TKSBrokerAPI.html\">https://tim55667757.github.io/TKSBrokerAPI/docs/tksbrokerapi/TKSBrokerAPI.html</a></li>\n<li><strong>Mako Templates for Python:</strong> <a href=\"https://www.makotemplates.org/\">https://www.makotemplates.org/</a></li>\n<li><strong>Open account for trading:</strong> <a href=\"https://tinkoff.ru/sl/AaX1Et1omnH\">https://tinkoff.ru/sl/AaX1Et1omnH</a></li>\n</ul>\n"}, {"fullname": "tksbrokerapi.Templates.MAIN_INFO_TEMPLATE", "modulename": "tksbrokerapi.Templates", "qualname": "MAIN_INFO_TEMPLATE", "kind": "variable", "doc": "<p>This HTML-template used for translating all Markdown-reports to HTML.</p>\n", "default_value": " = &#x27;&lt;!DOCTYPE html&gt;\\n&lt;html lang=&quot;en&quot;&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n    &lt;meta charset=&quot;utf-8&quot;/&gt;\\n    &lt;title&gt;${mainTitle}&lt;/title&gt;\\n    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;X:\\\\work\\\\projects\\\\FuzzyMarketAnalytics\\\\public\\\\style.css&quot;&gt;\\n    &lt;style&gt;${commonCSS}\\n    &lt;/style&gt;\\n&lt;/head&gt;\\n    &lt;body&gt;\\n        &lt;a href=&quot;https://github.com/Tim55667757/TKSBrokerAPI/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img class=&quot;logo&quot; src=&quot;https://github.com/Tim55667757/TKSBrokerAPI/blob/develop/docs/media/TKSBrokerAPI-Logo-mini.png?raw=true&quot; alt=&quot;TKSBrokerAPI-Logo&quot;&gt;&lt;/a&gt;\\n        &lt;div id=&quot;content&quot;&gt;&lt;/div&gt;\\n        &lt;script src=&quot;https://cdn.jsdelivr.net/npm/marked/marked.min.js&quot;&gt;&lt;/script&gt;\\n        &lt;script&gt;\\n            var markdown = `${markdown}`; \\n            document.getElementById(&quot;content&quot;).innerHTML = marked.parse(markdown);\\n        &lt;/script&gt;\\n        &lt;div id=&quot;footer&quot; class=&quot;footer-div&quot;&gt;\\n            &lt;a href=&quot;https://github.com/Tim55667757/TKSBrokerAPI/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;&lt;img class=&quot;logo2&quot; src=&quot;https://github.com/Tim55667757/TKSBrokerAPI/blob/develop/docs/media/TKSBrokerAPI-Logo-text.png?raw=true&quot; alt=&quot;TKSBrokerAPI Trade Automation Platform&quot;&gt;&lt;/a&gt;\\n            &lt;div style=&quot;display: flex; float: right; justify-content: space-between; padding: 12px 10px 2px 0; margin: 0;&quot;&gt;&lt;b&gt;Report generated by &lt;a href=&quot;https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;TKSBrokerAPI&lt;/a&gt;&lt;/b&gt;&lt;/div&gt;\\n        &lt;/div&gt;\\n    &lt;/body&gt;\\n&lt;/html&gt;&#x27;"}, {"fullname": "tksbrokerapi.Templates.COMMON_CSS", "modulename": "tksbrokerapi.Templates", "qualname": "COMMON_CSS", "kind": "variable", "doc": "<p>Common CSS used by all templates.</p>\n", "default_value": " = &#x27;\\n    body {\\n        background-image: url(&quot;data:image/svg+xml;utf8,&lt;svg xmlns=\\&#x27;http://www.w3.org/2000/svg\\&#x27; version=\\&#x27;1.1\\&#x27; height=\\&#x27;100px\\&#x27; width=\\&#x27;150px\\&#x27;&gt;&lt;text transform=\\&#x27;translate(20, 100) rotate(-45)\\&#x27; fill=\\&#x27;rgb(176,176,176)\\&#x27; font-size=\\&#x27;20\\&#x27; opacity=\\&#x27;0.25\\&#x27;&gt;TKSBrokerAPI&lt;/text&gt;&lt;/svg&gt;&quot;);\\n    }\\n\\n    .logo {\\n        width: 120px;\\n        float: right;\\n        opacity: 0.5;\\n        filter: alpha(opacity=40);\\n        border-radius: 55px 55px 55px 55px;\\n        margin: 0 0 12px 0;\\n    }\\n\\n    .logo:hover {\\n        opacity: 1.0;\\n        filter: alpha(opacity=100);\\n    }\\n\\n    .logo2 {\\n        height: 40px;\\n        float: left;\\n        opacity: 1.0;\\n        filter: alpha(opacity=100);\\n        border-radius: 25px 25px 25px 25px;\\n        padding: 0;\\n        margin: 0;\\n    }\\n\\n    .footer-div {\\n        font-family: &quot;Segoe UI&quot;, &quot;Frutiger&quot;, &quot;Frutiger Linotype&quot;, &quot;Dejavu Sans&quot;, &quot;Helvetica Neue&quot;, &quot;Arial&quot;, sans-serif;\\n        font-size: 12px;\\n        color: #333333;\\n        background: #E6E6E6;\\n        margin: 24px 0 24px 0;\\n        border-radius: 20px 20px 20px 20px;\\n        padding: 2px 2px 2px 10px;\\n        height: 40px;\\n    }\\n\\n    p {\\n        font-family: &quot;Segoe UI&quot;, &quot;Frutiger&quot;, &quot;Frutiger Linotype&quot;, &quot;Dejavu Sans&quot;, &quot;Helvetica Neue&quot;, &quot;Arial&quot;, sans-serif;\\n        font-size: 13px;\\n        padding: 2px;\\n        margin: 0;\\n    }\\n    \\n    li {\\n        font-family: &quot;Segoe UI&quot;, &quot;Frutiger&quot;, &quot;Frutiger Linotype&quot;, &quot;Dejavu Sans&quot;, &quot;Helvetica Neue&quot;, &quot;Arial&quot;, sans-serif;\\n        font-size: 13px;\\n        padding: 1px 10px;\\n    }\\n    \\n    mark {\\n        background: #FFFFE6;\\n        padding: 0 3px;\\n    }\\n    \\n    h1 {\\n        font-family: &quot;Segoe UI&quot;, &quot;Frutiger&quot;, &quot;Frutiger Linotype&quot;, &quot;Dejavu Sans&quot;, &quot;Helvetica Neue&quot;, &quot;Arial&quot;, sans-serif;\\n        font-size: 22px;\\n        color: #333333;\\n        margin: 24px 0 12px 0;\\n    }\\n    \\n    h2 {\\n        font-family: &quot;Segoe UI&quot;, &quot;Frutiger&quot;, &quot;Frutiger Linotype&quot;, &quot;Dejavu Sans&quot;, &quot;Helvetica Neue&quot;, &quot;Arial&quot;, sans-serif;\\n        font-size: 20px;\\n        color: #333333;\\n        margin: 20px 0 10px 22px;\\n    }\\n    \\n    h3 {\\n        font-family: &quot;Segoe UI&quot;, &quot;Frutiger&quot;, &quot;Frutiger Linotype&quot;, &quot;Dejavu Sans&quot;, &quot;Helvetica Neue&quot;, &quot;Arial&quot;, sans-serif;\\n        font-size: 18px;\\n        color: #333333;\\n        margin: 16px 0 8px 52px;\\n    }\\n    \\n    details {\\n        font-family: &quot;Segoe UI&quot;, &quot;Frutiger&quot;, &quot;Frutiger Linotype&quot;, &quot;Dejavu Sans&quot;, &quot;Helvetica Neue&quot;, &quot;Arial&quot;, sans-serif;\\n        font-size: 13px;\\n        padding: 2px 0;\\n        width: 100%;\\n        border-radius: 10px 10px 10px 10px;\\n        color: #333333;\\n    }\\n    \\n    summary {\\n        width: 100%;\\n        border-radius: 10px 10px 10px 10px;\\n        background: #CCCCCC;\\n        height: 20px;\\n        display: block;\\n        color: #333333;\\n        cursor: pointer;\\n    }\\n    \\n    summary::marker {\\n        display: none;\\n    }\\n    \\n    summary::before {\\n        content: &quot;\\x11B7&quot;;\\n        padding-right: 0.5em;\\n    }\\n    \\n    details[open] &gt; summary::before {\\n        content: &quot;\\x02B8D&quot;;\\n    }\\n    \\n    .expand {\\n        font-family: &quot;Segoe UI&quot;, &quot;Frutiger&quot;, &quot;Frutiger Linotype&quot;, &quot;Dejavu Sans&quot;, &quot;Helvetica Neue&quot;, &quot;Arial&quot;, sans-serif;\\n        font-size: 13px;\\n        border: none;\\n    }\\n    \\n    .expand::-ms-expand {\\n        font-family: &quot;Segoe UI&quot;, &quot;Frutiger&quot;, &quot;Frutiger Linotype&quot;, &quot;Dejavu Sans&quot;, &quot;Helvetica Neue&quot;, &quot;Arial&quot;, sans-serif;\\n        font-size: 13px;\\n        border-radius: 10px;\\n    }\\n    \\n    table {\\n        font-family: &quot;Segoe UI&quot;, &quot;Frutiger&quot;, &quot;Frutiger Linotype&quot;, &quot;Dejavu Sans&quot;, &quot;Helvetica Neue&quot;, &quot;Arial&quot;, sans-serif;\\n        font-size: 13px;\\n        width: 100%;\\n        border-radius: 40px 40px 10px 10px;\\n        border-spacing: 0;\\n        text-align: left;\\n        background: #FFFFFF;\\n        color: #333333;\\n    }\\n    \\n    td {\\n        border-style: solid;\\n        border-width: 0 1px 1px 0;\\n        border-color: white;\\n        padding: 12px;\\n        vertical-align: top;\\n        background: #E6E6E6;\\n    }\\n    \\n    th {\\n        border-style: solid;\\n        border-width: 0 1px 1px 0;\\n        border-color: white;\\n        font-size: 14px;\\n        vertical-align: top;\\n        background: #BFBFBF;\\n        text-align: center;\\n    }\\n    \\n    th:first-child {\\n        background: #BFBFBF;\\n        border-radius: 40px 0 0 0;\\n    }\\n    \\n    th:last-child {\\n        background: #BFBFBF;\\n        border-radius: 0 40px 0 0;\\n    }\\n\\n    tr:first-child td:first-child {\\n        border-style: solid;\\n        border-width: 0 1px 1px 0;\\n        border-color: white;\\n        padding: 12px;\\n        vertical-align: top;\\n        background: #E6E6E6;\\n        border-radius: 0 0 0 0;\\n    }\\n\\n    tr:first-child td:last-child {\\n        border-style: solid;\\n        border-width: 0 1px 1px 0;\\n        border-color: white;\\n        padding: 12px;\\n        vertical-align: top;\\n        background: #E6E6E6;\\n        border-radius: 0 0 0 0;\\n    }\\n\\n    tr:last-child td:first-child {\\n        background: #E6E6E6;\\n        border-radius: 0 0 0 20px;\\n    }\\n\\n    tr:last-child td:last-child {\\n        background: #E6E6E6;\\n        border-radius: 0 0 20px 0;\\n    }&#x27;"}, {"fullname": "tksbrokerapi.TradeRoutines", "modulename": "tksbrokerapi.TradeRoutines", "kind": "module", "doc": "<p><a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md\" target=\"_blank\"><img src=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/develop/docs/media/TKSBrokerAPI-Logo.png?raw=true\" alt=\"TKSBrokerAPI-Logo\" width=\"780\" /></a></p>\n\n<ul>\n<li><strong>T</strong>echnologies. <strong>K</strong>nowledge. <strong>S</strong>cience.</li>\n</ul>\n\n<p><a href=\"https://yoomoney.ru/fundraise/4WOyAgNgb7M.230111\"><img src=\"https://badgen.net/badge/gift/donate/green\" alt=\"gift\" /></a></p>\n\n<p>The <strong>TradeRoutines</strong> library contains some methods used by trade scenarios implemented with TKSBrokerAPI module.</p>\n\n<ul>\n<li><strong>TKSBrokerAPI module documentation:</strong> <a href=\"https://tim55667757.github.io/TKSBrokerAPI/docs/tksbrokerapi/TKSBrokerAPI.html\">https://tim55667757.github.io/TKSBrokerAPI/docs/tksbrokerapi/TKSBrokerAPI.html</a></li>\n<li><strong>TKSBrokerAPI CLI examples:</strong> <a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md\">https://github.com/Tim55667757/TKSBrokerAPI/blob/master/README_EN.md</a></li>\n<li><strong>About Tinkoff Invest API:</strong> <a href=\"https://tinkoff.github.io/investAPI/\">https://tinkoff.github.io/investAPI/</a></li>\n<li><strong>Tinkoff Invest API documentation:</strong> <a href=\"https://tinkoff.github.io/investAPI/swagger-ui/\">https://tinkoff.github.io/investAPI/swagger-ui/</a></li>\n<li><strong>Open account for trading:</strong> <a href=\"https://tinkoff.ru/sl/AaX1Et1omnH\">https://tinkoff.ru/sl/AaX1Et1omnH</a></li>\n</ul>\n"}, {"fullname": "tksbrokerapi.TradeRoutines.NANO", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "NANO", "kind": "variable", "doc": "<p>SI-constant: <code>NANO = 10^-9</code></p>\n", "default_value": " = 1e-09"}, {"fullname": "tksbrokerapi.TradeRoutines.FUZZY_SCALE", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "FUZZY_SCALE", "kind": "variable", "doc": "<p>Universal Fuzzy Scale is a special set of fuzzy levels: <code>{Min, Low, Med, High, Max}</code>.</p>\n", "default_value": " = &lt;fuzzyroutines.FuzzyRoutines.UniversalFuzzyScale object&gt;"}, {"fullname": "tksbrokerapi.TradeRoutines.FUZZY_LEVELS", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "FUZZY_LEVELS", "kind": "variable", "doc": "<p>Level names on Universal Fuzzy Scale <code>FUZZY_SCALE</code>. Default: <code>[\"Min\", \"Low\", \"Med\", \"High\", \"Max\"]</code>.</p>\n", "default_value": " = [&#x27;Min&#x27;, &#x27;Low&#x27;, &#x27;Med&#x27;, &#x27;High&#x27;, &#x27;Max&#x27;]"}, {"fullname": "tksbrokerapi.TradeRoutines.OPENING_RULES", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "OPENING_RULES", "kind": "variable", "doc": "<p>Opening positions rules depend of fuzzy Risk/Reach levels.</p>\n\n<p>This is the author's technique, proposed by <a href=\"https://www.linkedin.com/in/tgilmullin\">Timur Gilmullin</a> and <a href=\"https://www.linkedin.com/in/mgilmullin\">Mansur Gilmullin</a>,\nbased on fuzzy scales for measuring the levels of fuzzy risk and reachable. The following simple diagram explains what do we mean as Open/Close Fuzzy Rules:</p>\n\n<p><img src=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/develop/docs/media/005-Open-Close-Rules-Matrix.png?raw=true\" alt=\"Open-Close-Rules-Matrix\" style=\"display: block; margin-left: auto; margin-right: auto; width: 50%;\" /></p>\n\n<p>Here in table <code>T</code> mean <code>True</code>, <code>F</code> mean <code>False</code>. 1st position is for Opening rules, 2nd position is for Closing rules.\nThese rules are defined as transposed matrix constants <code>OPENING_RULES</code> and <code>CLOSING_RULES</code>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://github.com/devopshq/FuzzyRoutines\">FuzzyRoutines</a> library.</li>\n<li>How to work with Universal Fuzzy Scales: <a href=\"https://github.com/devopshq/FuzzyRoutines#Chapter_2_4\">EN</a>, <a href=\"https://math-n-algo.blogspot.com/2014/08/FuzzyClassificator.html#chapter_3\">RU</a>.</li>\n<li><code>CLOSING_RULES</code> constant, <code>CanOpen()</code> and <code>CanClose()</code> methods.</li>\n</ul>\n\n<p>Default rules for opening positions:</p>\n\n<table>\n<thead>\n<tr>\n  <th>Risk \\ Reach</th>\n  <th>Min</th>\n  <th>Low</th>\n  <th>Med</th>\n  <th>High</th>\n  <th>Max</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>Min</td>\n  <td>False</td>\n  <td>False</td>\n  <td>True</td>\n  <td>True</td>\n  <td>True</td>\n</tr>\n<tr>\n  <td>Low</td>\n  <td>False</td>\n  <td>False</td>\n  <td>True</td>\n  <td>True</td>\n  <td>True</td>\n</tr>\n<tr>\n  <td>Med</td>\n  <td>False</td>\n  <td>False</td>\n  <td>True</td>\n  <td>True</td>\n  <td>True</td>\n</tr>\n<tr>\n  <td>High</td>\n  <td>False</td>\n  <td>False</td>\n  <td>False</td>\n  <td>False</td>\n  <td>False</td>\n</tr>\n<tr>\n  <td>Max</td>\n  <td>False</td>\n  <td>False</td>\n  <td>False</td>\n  <td>False</td>\n  <td>False</td>\n</tr>\n</tbody>\n</table>\n", "default_value": " =         Min    Low    Med   High    Max\nMin   False  False   True   True   True\nLow   False  False   True   True   True\nMed   False  False   True   True   True\nHigh  False  False  False  False  False\nMax   False  False  False  False  False"}, {"fullname": "tksbrokerapi.TradeRoutines.CLOSING_RULES", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "CLOSING_RULES", "kind": "variable", "doc": "<p>Closing positions rules depend of fuzzy Risk/Reach levels. These rules are opposite for <code>OPENING_RULES</code>\n(see explanation there what do we mean as Open/Close Fuzzy Rules).</p>\n\n<p>See also: <code>CanClose()</code> method.</p>\n\n<p>Default rules for closing positions:</p>\n\n<table>\n<thead>\n<tr>\n  <th>Risk \\ Reach</th>\n  <th>Min</th>\n  <th>Low</th>\n  <th>Med</th>\n  <th>High</th>\n  <th>Max</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>Min</td>\n  <td>False</td>\n  <td>False</td>\n  <td>False</td>\n  <td>False</td>\n  <td>False</td>\n</tr>\n<tr>\n  <td>Low</td>\n  <td>False</td>\n  <td>False</td>\n  <td>False</td>\n  <td>False</td>\n  <td>False</td>\n</tr>\n<tr>\n  <td>Med</td>\n  <td>True</td>\n  <td>True</td>\n  <td>False</td>\n  <td>False</td>\n  <td>False</td>\n</tr>\n<tr>\n  <td>High</td>\n  <td>True</td>\n  <td>True</td>\n  <td>True</td>\n  <td>False</td>\n  <td>False</td>\n</tr>\n<tr>\n  <td>Max</td>\n  <td>True</td>\n  <td>True</td>\n  <td>True</td>\n  <td>False</td>\n  <td>False</td>\n</tr>\n</tbody>\n</table>\n", "default_value": " =         Min    Low    Med   High    Max\nMin   False  False  False  False  False\nLow   False  False  False  False  False\nMed    True   True  False  False  False\nHigh   True   True   True  False  False\nMax    True   True   True  False  False"}, {"fullname": "tksbrokerapi.TradeRoutines.CanOpen", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "CanOpen", "kind": "function", "doc": "<p>Checks opening positions rules in <code>OPENING_RULES</code> depend on fuzzy Risk/Reach levels.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><code>OPENING_RULES</code> constant,</li>\n<li><code>FUZZY_LEVELS</code> and <code>FUZZY_SCALE</code> constants,</li>\n<li><code>RiskLong()</code> and <code>RiskShort()</code> methods,</li>\n<li><code>ReachLong()</code> and <code>ReachShort()</code> methods.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fuzzyRisk</strong>:  Fuzzy Risk level name.</li>\n<li><strong>fuzzyReach</strong>:  Fuzzy Reach level name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool. If <code>True</code>, then possible to open position.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fuzzyRisk</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">fuzzyReach</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TradeRoutines.CanClose", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "CanClose", "kind": "function", "doc": "<p>Checks closing positions rules in <code>CLOSING_RULES</code> depend on fuzzy Risk/Reach levels.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><code>CLOSING_RULES</code> constant,</li>\n<li><code>FUZZY_LEVELS</code> and <code>FUZZY_SCALE</code> constants,</li>\n<li><code>RiskLong()</code> and <code>RiskShort()</code> methods,</li>\n<li><code>ReachLong()</code> and <code>ReachShort()</code> methods.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fuzzyRisk</strong>:  Fuzzy Risk level name.</li>\n<li><strong>fuzzyReach</strong>:  Fuzzy Reach level name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Bool. If <code>True</code>, then possible to close position.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fuzzyRisk</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">fuzzyReach</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TradeRoutines.RiskLong", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "RiskLong", "kind": "function", "doc": "<p>Function returns Risk as fuzzy level and percents of Risk in the range [0, 100], if you want buy from current price.</p>\n\n<p>This is the author's method, proposed by <a href=\"https://www.linkedin.com/in/tgilmullin\">Timur Gilmullin</a> and <a href=\"https://www.linkedin.com/in/mgilmullin\">Mansur Gilmullin</a>,\nbased on fuzzy scales for measuring the levels of Fuzzy Risk. The following simple diagram explains what do we mean as Fuzzy Risk level:</p>\n\n<p><img src=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/develop/docs/media/003-Risk.png?raw=true\" alt=\"Fuzzy-Risk\" style=\"display: block; margin-left: auto; margin-right: auto; width: 50%;\" /></p>\n\n<ul>\n<li>If open long (buy) position from current price: <code>RiskLong = Fuzzy(|P - L| / (H - L))</code>. Here:\n<ul>\n<li><code>P</code> is the current price,</li>\n<li><code>L (H)</code> is the lowest (highest) price in forecasted movements of candles chain or prognoses diapason border of price movement,</li>\n<li><code>Fuzzy()</code> is the fuzzyfication function that convert real values to its fuzzy representation.</li>\n</ul></li>\n</ul>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://github.com/devopshq/FuzzyRoutines\">FuzzyRoutines</a> library.</li>\n<li>How to work with Universal Fuzzy Scales: <a href=\"https://github.com/devopshq/FuzzyRoutines#Chapter_2_4\">EN</a>, <a href=\"https://math-n-algo.blogspot.com/2014/08/FuzzyClassificator.html#chapter_3\">RU</a>.</li>\n<li><code>RiskShort()</code> method,</li>\n<li><code>CanOpen()</code> and <code>CanClose()</code> methods.</li>\n<li><code>ReachLong()</code> and <code>ReachShort()</code> methods.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>curPrice</strong>:  Current actual price (usually the latest close price).</li>\n<li><strong>pHighest</strong>:  The highest close price in forecasted movements of candles chain or prognosis of the highest diapason border of price movement.</li>\n<li><strong>pLowest</strong>:  The lowest close price in forecasted movements of candles chain or prognosis of the lowest diapason border of price movement.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary with Fuzzy Risk level and Risk percents, e.g. <code>{\"riskFuzzy\": \"High\", \"riskPercent\": 66.67}</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">curPrice</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">pHighest</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">pLowest</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TradeRoutines.RiskShort", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "RiskShort", "kind": "function", "doc": "<p>Function returns Risk as fuzzy level and percents of Risk in the range [0, 100], if you want sell from current price.\nThis method is opposite for <code>RiskLong()</code> (see explanation there what do we mean as Fuzzy Risk).</p>\n\n<ul>\n<li>If open short (sell) position from current price: <code>RiskShort = Fuzzy(|P - H| / (H - L))</code>. Here:\n<ul>\n<li><code>P</code> is the current price,</li>\n<li><code>L (H)</code> is the lowest (highest) price in forecasted movements of candles chain or prognoses diapason border of price movement,</li>\n<li><code>Fuzzy()</code> is the fuzzyfication function that convert real values to its fuzzy representation.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>curPrice</strong>:  Current actual price (usually the latest close price).</li>\n<li><strong>pHighest</strong>:  The highest close price in forecasted movements of candles chain or prognosis of the highest diapason border of price movement.</li>\n<li><strong>pLowest</strong>:  The lowest close price in forecasted movements of candles chain or prognosis of the lowest diapason border of price movement.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary with Fuzzy Risk level and Risk percents, e.g. <code>{\"riskFuzzy\": \"Low\", \"riskPercent\": 20.12}</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">curPrice</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">pHighest</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">pLowest</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TradeRoutines.ReachLong", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "ReachLong", "kind": "function", "doc": "<p>The Fuzzy Reach is a value of forecast reachable of price (highest or lowest close). In this function we calculate\nthe reachability of the highest close price.</p>\n\n<p>This is the author's method, proposed by <a href=\"https://www.linkedin.com/in/tgilmullin\">Timur Gilmullin</a> and\n<a href=\"https://www.linkedin.com/in/mgilmullin\">Mansur Gilmullin</a>, based on fuzzy scales for measuring the levels\nof Fuzzy Reach. The following simple diagram explains what is meant by the Fuzzy Reach level:</p>\n\n<p><img src=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/develop/docs/media/004-Reachability.png?raw=true\" alt=\"Fuzzy-Reach\" style=\"display: block; margin-left: auto; margin-right: auto; width: 50%;\" /></p>\n\n<p>There are fuzzy levels and percents in the range [0, 100] for the maximum and minimum forecasted close prices.\nPrognosis horizon is divided by 5 parts of time diapason: I, II, III, IV and V, from the first forecasted candle (or price)\nto the last forecasted candle (or price).</p>\n\n<p>Every part correlate with some fuzzy level, depending on the distance in time from current actual candle (or price):</p>\n\n<ul>\n<li><code>I = Max</code>,</li>\n<li><code>II = High</code>,</li>\n<li><code>III = Med</code>,</li>\n<li><code>IV = Low</code>,</li>\n<li><code>V = Min</code>.</li>\n</ul>\n\n<p>This function search for first fuzzy level appropriate to the part of time diapason, where the close price (highest or lowest)\nlocated in this diapason. Of course, you can use other price chains (open, high, low) instead of candle close prices,\nbut usually this is not recommended.</p>\n\n<p><strong>Recommendation.</strong> If you have no prognosis chain of candles just use <code>\"Med\"</code> Fuzzy Reach level.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><code>OPENING_RULES</code> and <code>CLOSING_RULES</code> constants,</li>\n<li><code>CanOpen()</code> and <code>CanClose()</code> methods,</li>\n<li><code>FUZZY_LEVELS</code> and <code>FUZZY_SCALE</code> constants,</li>\n<li><code>RiskLong()</code> and <code>RiskShort()</code> methods,</li>\n<li><code>ReachShort()</code> method.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pClosing</strong>:  Pandas Series with prognosis chain of closing prices of candles. This is \"close prices\"\nin OHLCV-formatted candles chain. The forecasted prices are indexed starting from zero,\nthis is the first candle of the forecast. The last price of the forecast is the \"farthest\"\nrelative to the current actual close price.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary with Fuzzy Reach level and Reach percents for the highest close price, e.g. <code>{\"reachFuzzy\": \"Low\", \"reachPercent\": 20.12}</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pClosing</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TradeRoutines.ReachShort", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "ReachShort", "kind": "function", "doc": "<p>The Fuzzy Reach is a value of forecast reachable of price (highest or lowest close). This method is similar like\n<code>ReachLong()</code> (see explanation there what do we mean as Fuzzy Reach), but in this case we calculate the reachability\nof the lowest close price.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pClosing</strong>:  Pandas Series with prognosis chain of closing prices of candles. This is \"close prices\"\nin OHLCV-formatted candles chain. The forecasted prices are indexed starting from zero,\nthis is the first candle of the forecast. The last price of the forecast is the \"farthest\"\nrelative to the current actual close price. <strong>Recommendation.</strong> If you have no prognosis chain\nof candles just use <code>\"Med\"</code> Fuzzy Reach level.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Dictionary with Fuzzy Reach level and Reach percents for the lowest close price, e.g. <code>{\"reachFuzzy\": \"High\", \"reachPercent\": 66.67}</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pClosing</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TradeRoutines.GetDatesAsString", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "GetDatesAsString", "kind": "function", "doc": "<p>Create tuple of date and time strings with timezone parsed from user-friendly date.</p>\n\n<p>Warning! All dates must be in UTC time zone!</p>\n\n<p>User dates format must be like: <code>\"%Y-%m-%d\"</code>, e.g. <code>\"2020-02-03\"</code> (3 Feb, 2020).</p>\n\n<p>Output date is UTC ISO time format by default: <code>\"%Y-%m-%dT%H:%M:%SZ\"</code>.</p>\n\n<p>Example input: <code>start=\"2022-06-01\", end=\"2022-06-20\"</code> -> output: <code>(\"2022-06-01T00:00:00Z\", \"2022-06-20T23:59:59Z\")</code>.\nAn error exception will occur if input date has incorrect format.</p>\n\n<p>If <code>start=None</code>, <code>end=None</code> then return dates from yesterday to the end of the day.</p>\n\n<p>If <code>start=some_date_1</code>, <code>end=None</code> then return dates from <code>some_date_1</code> to the end of the day.</p>\n\n<p>If <code>start=some_date_1</code>, <code>end=some_date_2</code> then return dates from start of <code>some_date_1</code> to end of <code>some_date_2</code>.</p>\n\n<p>Start day may be negative integer numbers: <code>-1</code>, <code>-2</code>, <code>-3</code> \u2014 how many days ago.</p>\n\n<p>Also, you can use keywords for start if <code>end=None</code>:</p>\n\n<ul>\n<li><code>today</code> (from 00:00:00 to the end of current day),</li>\n<li><code>yesterday</code> (-1 day from 00:00:00 to 23:59:59),</li>\n<li><code>week</code> (-7 day from 00:00:00 to the end of current day),</li>\n<li><code>month</code> (-30 day from 00:00:00 to the end of current day),</li>\n<li><code>year</code> (-365 day from 00:00:00 to the end of current day).</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>start</strong>:  start day in format defined by <code>userFormat</code> or keyword.</li>\n<li><strong>end</strong>:  end day in format defined by <code>userFormat</code>.</li>\n<li><strong>userFormat</strong>:  user-friendly date format, e.g. <code>\"%Y-%m-%d\"</code>.</li>\n<li><strong>outputFormat</strong>:  output string date format.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple with 2 strings <code>(\"start\", \"end\")</code>. Example of return is <code>(\"2022-06-01T00:00:00Z\", \"2022-06-20T23:59:59Z\")</code>.\n           Second string is the end of the last day.\n           Tuple (\"\", \"\") returned if errors occurred.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">userFormat</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">outputFormat</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">T%H:%M:%SZ&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TradeRoutines.NanoToFloat", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "NanoToFloat", "kind": "function", "doc": "<p>Convert number in nano-view mode with string parameter <code>units</code> and integer parameter <code>nano</code> to float view.</p>\n\n<p>Examples:</p>\n\n<ul>\n<li><code>NanoToFloat(units=\"2\", nano=500000000) -&gt; 2.5</code></li>\n<li><code>NanoToFloat(units=\"0\", nano=50000000) -&gt; 0.05</code></li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>units</strong>:  integer string or integer parameter that represents the integer part of number</li>\n<li><strong>nano</strong>:  integer string or integer parameter that represents the fractional part of number</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>float view of number. If an error occurred, then returns <code>0.</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">nano</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TradeRoutines.FloatToNano", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "FloatToNano", "kind": "function", "doc": "<p>Convert float number to nano-type view: dictionary with string <code>units</code> and integer <code>nano</code> parameters <code>{\"units\": \"string\", \"nano\": integer}</code>.</p>\n\n<p>Examples:</p>\n\n<ul>\n<li><code>FloatToNano(number=2.5) -&gt; {\"units\": \"2\", \"nano\": 500000000}</code></li>\n<li><code>FloatToNano(number=0.05) -&gt; {\"units\": \"0\", \"nano\": 50000000}</code></li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number</strong>:  float number.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>nano-type view of number: <code>{\"units\": \"string\", \"nano\": integer}</code>.\n           If an error occurred, then returns <code>{\"units\": \"0\", \"nano\": 0}</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TradeRoutines.UpdateClassFields", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "UpdateClassFields", "kind": "function", "doc": "<p>This method get config as dictionary (preloaded from YAML file) and apply <code>key: value</code> as names of class fields and\nvalues of class fields. Example for class <code>TradeScenario</code>:\n<code>config[\"tickers\"] = [\"TICKER1\", \"TICKER2\"] ==&gt; TradeScenario(TinkoffBrokerServer).tickers = [\"TICKER1\", \"TICKER2\"]</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>instance</strong>:  instance of class to parametrize.</li>\n<li>**params: dict with all parameters in <code>key**:  value</code> format. It will be nothing with object if an error occurred.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instance</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TradeRoutines.SeparateByEqualParts", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "SeparateByEqualParts", "kind": "function", "doc": "<p>Gets input list and try to separate it by equal parts of elements.</p>\n\n<p>Examples:</p>\n\n<ul>\n<li><code>SeparateByEqualParts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], parts=2) -&gt; [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]</code></li>\n<li><code>SeparateByEqualParts([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], parts=2, union=True) -&gt; [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9, 10]]</code></li>\n<li><code>SeparateByEqualParts([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], parts=2, union=False) -&gt; [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10]]]</code></li>\n<li><code>SeparateByEqualParts([1, 2, 3], parts=2, union=True) -&gt; [[1], [2, 3]]</code></li>\n<li><code>SeparateByEqualParts([1, 2, 3], parts=2, union=False) -&gt; [[1], [2], [3]]</code></li>\n</ul>\n\n<p>If parts &gt; length of elements:</p>\n\n<ul>\n<li><code>SeparateByEqualParts([1], parts=2, union=True) -&gt; [[1]]</code></li>\n<li><code>SeparateByEqualParts([1, 2, 3], parts=4, union=True) -&gt; [[1], [2], [3]]</code></li>\n<li><code>SeparateByEqualParts([1], parts=2, union=False) -&gt; [[1], []]</code></li>\n<li><code>SeparateByEqualParts([1, 2, 3], parts=4, union=False) -&gt; [[1], [2], [3], []]</code></li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>elements</strong>:  list of objects.</li>\n<li><strong>parts</strong>:  int, numbers of equal parts of objects.</li>\n<li><strong>union</strong>:  bool, if True and if the remainder of the separating not empty, then remainder part union with the last part.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list of lists with equal parts of objects. If an error occurred, then returns empty list <code>[]</code>.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">elements</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">parts</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">union</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TradeRoutines.CalculateLotsForDeal", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "CalculateLotsForDeal", "kind": "function", "doc": "<p>Calculates maximum lots for deal depends on current price and volume of instrument in one lot.</p>\n\n<p>Formula: <code>lots = maxCost // (currentPrice * volumeInLot)</code>, it means max count of lots, for which will be:\n<code>cost = lots * currentPrice * volumeInLot &lt;= maxCost</code>.</p>\n\n<p>If <code>costOneLot = currentPrice * volumeInLot &gt; maxCost</code>, then returned <code>lots = 1</code>.</p>\n\n<p>If an error occurred then returned <code>lots = 0</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>currentPrice</strong>:  the current price of instrument, &gt;= 0.</li>\n<li><strong>maxCost</strong>:  the maximum cost of all lots of instrument in portfolio, &gt;= 0.</li>\n<li><strong>volumeInLot</strong>:  volumes of instrument in one lot, &gt;= 1.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>integer number of lots, &gt;= 0.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">currentPrice</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">maxCost</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">volumeInLot</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TradeRoutines.HampelFilter", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "HampelFilter", "kind": "function", "doc": "<p>Outlier Detection with Hampel Filter. It can detect outliers based on a sliding window and counting difference\nbetween median values and input values of series. The Hampel filter is often considered extremely effective in practice.</p>\n\n<p>For each window we calculate the Median and the Median Absolute Deviation (MAD). If the considered observation\ndiffers from the window median by more than sigma standard deviations multiple on scaleFactor, then we treat it\nas an outlier.</p>\n\n<p>Let Xi \u2014 elements of input series in i-th window,\ns \u2014 sigma, the number of standard deviations,\nk \u2014 scale factor, depends on distribution (\u22481.4826 for normal).</p>\n\n<p>How to calculate rolling MAD: <code>MAD(Xi) = Median(|x1 \u2212 Median (Xi)|, ..., |xn \u2212 Median(Xi)|)</code></p>\n\n<p>What is an anomaly: <code>A = {a | |a \u2212 Median (Xi)| &gt; s \u2219 k \u2219 MAD(Xi)}</code></p>\n\n<p>References:</p>\n\n<ol>\n<li>Gilmullin T.M., Gilmullin M.F. How to quickly find anomalies in number series using the Hampel method. December 27, 2022.\n<ul>\n<li>Link (EN): <a href=\"https://forworktests.blogspot.com/2023/01/how-to-quickly-find-anomalies-in-number.html\"><a href=\"https://forworktests.blogspot.com/2023/01/how-to-quickly-find-anomalies-in-number.html\">https://forworktests.blogspot.com/2023/01/how-to-quickly-find-anomalies-in-number.html</a></a></li>\n<li>Link (RU): <a href=\"https://forworktests.blogspot.com/2022/12/blog-post.html\"><a href=\"https://forworktests.blogspot.com/2022/12/blog-post.html\">https://forworktests.blogspot.com/2022/12/blog-post.html</a></a></li>\n</ul></li>\n<li>Lewinson Eryk. Outlier Detection with Hampel Filter. September 26, 2019.\n<ul>\n<li>Link: <a href=\"https://towardsdatascience.com/outlier-detection-with-hampel-filter-85ddf523c73d\"><a href=\"https://towardsdatascience.com/outlier-detection-with-hampel-filter-85ddf523c73d\">https://towardsdatascience.com/outlier-detection-with-hampel-filter-85ddf523c73d</a></a></li>\n</ul></li>\n<li>Hancong Liu, Sirish Shah and Wei Jiang. On-line outlier detection and data cleaning. Computers and Chemical Engineering. Vol. 28, March 2004, pp. 1635\u20131647.\n<ul>\n<li>Link: <a href=\"https://sites.ualberta.ca/~slshah/files/on_line_outlier_det.pdf\"><a href=\"https://sites.ualberta.ca/~slshah/files/on_line_outlier_det.pdf\">https://sites.ualberta.ca/~slshah/files/on_line_outlier_det.pdf</a></a></li>\n</ul></li>\n<li>Hampel F. R. The influence curve and its role in robust estimation. Journal of the American Statistical Association, 69, 382\u2013393, 1974.</li>\n</ol>\n\n<p>Examples:</p>\n\n<ul>\n<li><code>HampelFilter([1, 1, 1, 1, 1, 1], window=3) -&gt; pd.Series([False, False, False, False, False, False])</code></li>\n<li><code>HampelFilter([1, 1, 1, 2, 1, 1], window=3) -&gt; pd.Series([False, False, False, True, False, False])</code></li>\n<li><code>HampelFilter([0, 1, 1, 1, 1, 0], window=3) -&gt; pd.Series([True, False, False, False, False, True])</code></li>\n<li><code>HampelFilter([1]) -&gt; pd.Series([False])</code></li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>series</strong>:  Pandas Series object with numbers in which we identify outliers.</li>\n<li><strong>window</strong>:  length of the sliding window (5 points by default), 1 &lt;= window &lt;= len(series).</li>\n<li><strong>sigma</strong>:  sigma is the number of standard deviations which identify the outlier (3 sigma by default), &gt; 0.</li>\n<li><strong>scaleFactor</strong>:  constant scale factor (1.4826 by default for Gaussian distribution), &gt; 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Pandas Series object with True/False values.\n           <code>True</code> mean that an outlier detected in that position of input series.\n           If an error occurred then empty series returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">series</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">scaleFactor</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.4826</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.TradeRoutines.HampelAnomalyDetection", "modulename": "tksbrokerapi.TradeRoutines", "qualname": "HampelAnomalyDetection", "kind": "function", "doc": "<p>Anomaly Detection function using Hampel Filter. This function returns the minimum index of elements in anomaly list\nor index of the first maximum element in input series if this index less than anomaly element index. If series has\nno anomalies then <code>None</code> will be return.</p>\n\n<p>Anomaly filter is a function:\nF: X \u2192 {True, False}. F(xi) = True, if xi \u2208 A; False, if xi \u2209 A, where X \u2014 input series with xi elements, A \u2014 anomaly set.</p>\n\n<p>References:</p>\n\n<ol>\n<li>Gilmullin T.M., Gilmullin M.F. How to quickly find anomalies in number series using the Hampel method. December 27, 2022.\n<ul>\n<li>Link (EN): <a href=\"https://forworktests.blogspot.com/2023/01/how-to-quickly-find-anomalies-in-number.html\"><a href=\"https://forworktests.blogspot.com/2023/01/how-to-quickly-find-anomalies-in-number.html\">https://forworktests.blogspot.com/2023/01/how-to-quickly-find-anomalies-in-number.html</a></a></li>\n<li>Link (RU): <a href=\"https://forworktests.blogspot.com/2022/12/blog-post.html\"><a href=\"https://forworktests.blogspot.com/2022/12/blog-post.html\">https://forworktests.blogspot.com/2022/12/blog-post.html</a></a></li>\n</ul></li>\n<li>Jupyter Notebook with examples:\n<ul>\n<li>Link (EN): <a href=\"https://nbviewer.org/github/Tim55667757/TKSBrokerAPI/blob/develop/docs/examples/HampelFilteringExample_EN.ipynb\"><a href=\"https://nbviewer.org/github/Tim55667757/TKSBrokerAPI/blob/develop/docs/examples/HampelFilteringExample_EN.ipynb\">https://nbviewer.org/github/Tim55667757/TKSBrokerAPI/blob/develop/docs/examples/HampelFilteringExample_EN.ipynb</a></a></li>\n<li>Link (RU): <a href=\"https://nbviewer.org/github/Tim55667757/TKSBrokerAPI/blob/develop/docs/examples/HampelFilteringExample.ipynb\"><a href=\"https://nbviewer.org/github/Tim55667757/TKSBrokerAPI/blob/develop/docs/examples/HampelFilteringExample.ipynb\">https://nbviewer.org/github/Tim55667757/TKSBrokerAPI/blob/develop/docs/examples/HampelFilteringExample.ipynb</a></a></li>\n</ul></li>\n<li>Simple Python script demonstrate how to use Hampel Filter to determine anomalies in time series:\n<ul>\n<li>Link: <a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/develop/docs/examples/TestAnomalyFilter.py\"><a href=\"https://github.com/Tim55667757/TKSBrokerAPI/blob/develop/docs/examples/TestAnomalyFilter.py\">https://github.com/Tim55667757/TKSBrokerAPI/blob/develop/docs/examples/TestAnomalyFilter.py</a></a></li>\n</ul></li>\n</ol>\n\n<p>Examples:</p>\n\n<ul>\n<li><code>HampelAnomalyDetection([1, 1, 1, 1, 1, 1]) -&gt; None</code></li>\n<li><code>HampelAnomalyDetection([1, 1, 1, 1, 111, 1]) -&gt; 4</code></li>\n<li><code>HampelAnomalyDetection([1, 1, 10, 1, 1, 1]) -&gt; 2</code></li>\n<li><code>HampelAnomalyDetection([111, 1, 1, 1, 1, 1]) -&gt; 0</code></li>\n<li><code>HampelAnomalyDetection([111, 1, 1, 1, 1, 111]) -&gt; 0</code></li>\n<li><code>HampelAnomalyDetection([1, 11, 1, 111, 1, 1]) -&gt; 1</code></li>\n<li><code>HampelAnomalyDetection([1, 1, 1, 111, 99, 11]) -&gt; 3</code></li>\n<li><code>HampelAnomalyDetection([1, 1, 11, 111, 1, 1, 1, 11111]) -&gt; 2</code></li>\n<li><code>HampelAnomalyDetection([1, 1, 1, 111, 111, 1, 1, 1, 1]) -&gt; 3</code></li>\n<li><code>HampelAnomalyDetection([1, 1, 1, 1, 111, 1, 1, 11111, 5555]) -&gt; 4</code></li>\n<li><code>HampelAnomalyDetection([9, 13, 12, 12, 13, 12, 12, 13, 12, 12, 13, 12, 12, 13, 12, 13, 12, 12, 1, 1]) -&gt; 1</code></li>\n<li><code>HampelAnomalyDetection([9, 13, 12, 12, 13, 12, 1000, 13, 12, 12, 300000, 12, 12, 13, 12, 2000, 1, 1, 1, 1]) -&gt; 6</code></li>\n</ul>\n\n<p>Some **kwargs parameters you can pass to <code>HampelFilter()</code>:</p>\n\n<ul>\n<li><code>window</code> is the length of the sliding window (5 points by default), 1 &lt;= window &lt;= len(series).</li>\n<li><code>sigma</code> is the number of standard deviations which identify the outlier (3 sigma by default), &gt; 0.</li>\n<li><code>scaleFactor</code> is the constant scale factor (1.4826 by default), &gt; 0.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>series</strong>:  list of numbers or Pandas Series object with numbers in which we identify index of first anomaly (outlier's index).</li>\n<li><strong>kwargs</strong>:  See <code>HampelFilter()</code> docstring with all possible parameters.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>index of the first element with anomaly in series will be return or <code>None</code> if no anomaly.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">series</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.UniLogger", "modulename": "tksbrokerapi.UniLogger", "kind": "module", "doc": "<p>This module init standard python logging system with some of pre-defined parameters,\ne.g. debug level for log-file, info level for console, log-rotate and so on.</p>\n\n<p>Current internal logger name for TKSBrokerAPI module is <code>TKSBrokerAPI-UniLogger</code>.</p>\n"}, {"fullname": "tksbrokerapi.UniLogger.SetLevel", "modulename": "tksbrokerapi.UniLogger", "qualname": "SetLevel", "kind": "function", "doc": "<p>This procedure setting up UniLogger verbosity level.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vLevel</span><span class=\"o\">=</span><span class=\"s1\">&#39;ERROR&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.UniLogger.LevelFilter", "modulename": "tksbrokerapi.UniLogger", "qualname": "LevelFilter", "kind": "class", "doc": "<p>Class using to set up log level filtering.</p>\n", "bases": "logging.Filter"}, {"fullname": "tksbrokerapi.UniLogger.LevelFilter.__init__", "modulename": "tksbrokerapi.UniLogger", "qualname": "LevelFilter.__init__", "kind": "function", "doc": "<p>Initialize a filter.</p>\n\n<p>Initialize with the name of the logger which, together with its\nchildren, will have its events allowed through the filter. If no\nname is specified, allow every event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span></span>)</span>"}, {"fullname": "tksbrokerapi.UniLogger.LevelFilter.filter", "modulename": "tksbrokerapi.UniLogger", "qualname": "LevelFilter.filter", "kind": "function", "doc": "<p>Determine if the specified record is to be logged.</p>\n\n<p>Returns True if the record should be logged, or False otherwise.\nIf deemed appropriate, the record may be modified in-place.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.UniLogger.EnableLogger", "modulename": "tksbrokerapi.UniLogger", "qualname": "EnableLogger", "kind": "function", "doc": "<p>Adding new file logger with rotation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">logFile</span>,</span><span class=\"param\">\t<span class=\"n\">parentHandler</span><span class=\"o\">=&lt;</span><span class=\"n\">Logger</span> <span class=\"n\">TKSBrokerAPI</span><span class=\"o\">-</span><span class=\"n\">UniLogger</span> <span class=\"p\">(</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">useFormat</span><span class=\"o\">=&lt;</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Formatter</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tksbrokerapi.UniLogger.DisableLogger", "modulename": "tksbrokerapi.UniLogger", "qualname": "DisableLogger", "kind": "function", "doc": "<p>Disable given file logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">handler</span>, </span><span class=\"param\"><span class=\"n\">parentHandler</span><span class=\"o\">=&lt;</span><span class=\"n\">Logger</span> <span class=\"n\">TKSBrokerAPI</span><span class=\"o\">-</span><span class=\"n\">UniLogger</span> <span class=\"p\">(</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();